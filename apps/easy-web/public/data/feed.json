[
  {
    "creator": "Vitalii Shevchuk",
    "title": "5 Reasons Why Web 3 Will Fail",
    "link": "https://javascript.plainenglish.io/top-5-reasons-why-web-3-will-fail-57237e4c3db?source=rss-e3c7b0002690------2",
    "pubDate": "Mon, 24 Jan 2022 05:09:15 GMT",
    "content:encoded": "<h3>🔥 5 Reasons Why Web 3 Will Fail</h3><p>Do you really need to waste your time learning Web 3 if it is just a failed idea?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mhyLYOxkQ_5NddB7L_BEag.png\" /></figure><h3>Intro</h3><p>For the majority of people, Web 3.0 sounds like one more buzzword used to promote crypto scams or get a piece of hype. For others — it is decentralized web applications where a network of people control their own slice of the internet. Where the data is managed with smart contracts and crypto, rather than owned by <strong>Google</strong>, <strong>Meta</strong> (<strong>Facebook</strong>), and <strong>Amazon</strong>. <strong>The idea looks quite romantic but is implementation realistic enough? Or it will remain only in the dreams of the crypto subculture and never become mainstream.</strong> We are going to answer this question, but first, let’s look at the downside of Web 3.0 perspectives.</p><h3>1. Web 3 is Chaotic</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FjoV1k1sNOT5xC%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FjoV1k1sNOT5xC%2Fgiphy-downsized.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FjoV1k1sNOT5xC%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"246\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f274fea17477a99877374a56abc34411/href\">https://medium.com/media/f274fea17477a99877374a56abc34411/href</a></iframe><p>The main feature of Web 3.0 is decentralization, which means the web application is stored in a <strong>blockchain</strong>. The owner is all participants of blockchain, and they decide on the product changes through the <strong>consensus</strong>.</p><blockquote>To be more fluent with terminology, take a look at this article.</blockquote><p><a href=\"https://itnext.io/top-18-web-3-0-trends-every-frontend-developer-has-to-follow-in-2022-2861f9b63627\">🔥 Top 18 Web 3.0 Trends Every Frontend Developer Has to Follow in 2022</a></p><p>The main point is that there is no single authority that takes responsibility for the data. There are no laws or regulations to define what a program or content can be published. It will be a huge headache to control it and find who will be responsible for harassment and scam content. The regulation is far away from technologies and it will make more scammers find out new ways to abuse the system.</p><h3>2. Web 3 is Hard to develop</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FQYY4cJp6EzEIbMUtIn%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FQYY4cJp6EzEIbMUtIn%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FQYY4cJp6EzEIbMUtIn%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"244\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/83af1e0f5e27812fb302c10acf9701e2/href\">https://medium.com/media/83af1e0f5e27812fb302c10acf9701e2/href</a></iframe><p>The Web 3.0 applications are called DApps, or decentralized applications. The codebase will be distributed across the blockchain and the data stored in peer-to-peer networks. There are more issues coming from this architecture:</p><ul><li>The consensus approach is slowing down development;</li><li>The application will depend on the particular blockchain that may have some issues;</li><li>Depending on third-party tools that provide services to build the app (such services are still very new and didn’t prove themselves in long run);</li><li>Debugging and testing problems.</li></ul><p><a href=\"https://javascript.plainenglish.io/top-3-web-3-0-architecture-layers-explained-frontend-backend-and-data-e10200f7fc76\">Top Web3 Architecture Layers Explained: Frontend, Backend, and Data</a></p><h3>3. DApps are not actually decentralized 😦</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FjrvfKvr2mmcFO%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FjrvfKvr2mmcFO%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FjrvfKvr2mmcFO%2F200.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"243\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c08d0842e15c433a08bd053ce2095f5c/href\">https://medium.com/media/c08d0842e15c433a08bd053ce2095f5c/href</a></iframe><p>Technically — yes, <strong>DApps</strong> are residing in blockchain and fueled with crypto, but some had to create this blockchain campaign and launch the token. If you take a look at the stats:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Fb4ckMcpMU08Il_wOXO5SQ.png\" /></figure><p>You will notice that a large part of the blockchain industry is controlled by vulture capitalists and silicon valley insiders. If you are planning to build your Web 3.0 app in some of the blockchains, be aware that it can be shot down anytime by the manipulation of some limited group of people who own the major crypto market.</p><h3>4. No benefit for mainstream businesses</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FwYyTHMm50f4Dm%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FwYyTHMm50f4Dm%2Fgiphy-downsized.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FwYyTHMm50f4Dm%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"251\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c968eae722889a93da85627986ddcf3b/href\">https://medium.com/media/c968eae722889a93da85627986ddcf3b/href</a></iframe><p>Theoretically, any web application can be built using the Web 3 stack. Well, cryptocurrency, blockchain, decentralization sound great, but what is the point to convert your business to a decentralized application, it is equal to giving away your assets for no reason. There is no clear understanding of why everyone has to do it, for example, banks. Too many people are working in the financial industry, and making life on it, and suddenly, they have to give up their job and business. Blockchain technology is powerful and perspective, but it will take time to find the best use of it.</p><h3>5. Crypto crush will ruin all Web 3 perspectives</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2F3o7TKsaPan3GaMBWmI%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F3o7TKsaPan3GaMBWmI%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2F3o7TKsaPan3GaMBWmI%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"299\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d92b13df413799680e53d42a21f56a0c/href\">https://medium.com/media/d92b13df413799680e53d42a21f56a0c/href</a></iframe><p>Cryptocurrency (tokens) — are the main source of payment for any transactions in the blockchain, and there is no way Web 3 can exist without it. And cryptocurrency doesn’t bring any other values, you can not buy a house or car using crypto or <strong>NFT</strong>. It makes the crypto market quite fragile. Ironically, it exists only because of groups of enthusiasts and speculators. On the other hand, the price of some cryptocurrencies is skyrocketing without any meaningful reason. Such a bubble can explode at any time, and a domino effect will make Web 3 fade in the past.</p><h3>Conclusion</h3><p>There are still a lot of issues to solve in Web 3 to make it more human-friendly. For some people, it will be a major argument to exclude such technologies from their life, because such a future will never come true, and they will be right. For others, it will be a huge opportunity to make this future closer and take a benefit of it. Some smart human said: <em>“Pessimism sounds smart, but optimism makes money.”</em></p><p>And if it goes mainstream you will be glad that you started early.</p><p><em>Thank you for reading, let me know if you learned something new. If you don&#39;t want to be scummed by crypto, follow me on medium and learn more about Web 3.</em></p><ul><li><a href=\"https://easy-web.medium.com/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://easy-web.medium.com/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li></ul><h3>Learn More</h3><ul><li><a href=\"https://itnext.io/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon &amp; LinkedIn</a></li><li><a href=\"https://itnext.io/building-beautiful-tiktok-clone-with-angular-and-micro-frontend-part-1-bdd189425695\">🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend</a></li><li><a href=\"https://itnext.io/how-micro-frontend-changes-the-future-of-angular-bb4deb2cfdad\">🔥 How Micro Frontend changes the Future of Angular?</a></li></ul><p><em>More content at </em><a href=\"http://plainenglish.io/\"><strong><em>plainenglish.io</em></strong></a><em>. Sign up for our </em><a href=\"http://newsletter.plainenglish.io/\"><strong><em>free weekly newsletter</em></strong></a><em>. Get exclusive access to writing opportunities and advice in our </em><a href=\"https://discord.gg/GtDtUAvyhW\"><strong><em>community Discord</em></strong></a><em>.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=57237e4c3db\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://javascript.plainenglish.io/top-5-reasons-why-web-3-will-fail-57237e4c3db\">5 Reasons Why Web 3 Will Fail</a> was originally published in <a href=\"https://javascript.plainenglish.io\">JavaScript in Plain English</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "🔥 5 Reasons Why Web 3 Will Fail\nDo you really need to waste your time learning Web 3 if it is just a failed idea?\n\nIntro\nFor the majority of people, Web 3.0 sounds like one more buzzword used to promote crypto scams or get a piece of hype. For others — it is decentralized web applications where a network of people control their own slice of the internet. Where the data is managed with smart contracts and crypto, rather than owned by Google, Meta (Facebook), and Amazon. The idea looks quite romantic but is implementation realistic enough? Or it will remain only in the dreams of the crypto subculture and never become mainstream. We are going to answer this question, but first, let’s look at the downside of Web 3.0 perspectives.\n1. Web 3 is Chaotic\nhttps://medium.com/media/f274fea17477a99877374a56abc34411/href\nThe main feature of Web 3.0 is decentralization, which means the web application is stored in a blockchain. The owner is all participants of blockchain, and they decide on the product changes through the consensus.\nTo be more fluent with terminology, take a look at this article.\n🔥 Top 18 Web 3.0 Trends Every Frontend Developer Has to Follow in 2022\nThe main point is that there is no single authority that takes responsibility for the data. There are no laws or regulations to define what a program or content can be published. It will be a huge headache to control it and find who will be responsible for harassment and scam content. The regulation is far away from technologies and it will make more scammers find out new ways to abuse the system.\n2. Web 3 is Hard to develop\nhttps://medium.com/media/83af1e0f5e27812fb302c10acf9701e2/href\nThe Web 3.0 applications are called DApps, or decentralized applications. The codebase will be distributed across the blockchain and the data stored in peer-to-peer networks. There are more issues coming from this architecture:\n\nThe consensus approach is slowing down development;\nThe application will depend on the particular blockchain that may have some issues;\nDepending on third-party tools that provide services to build the app (such services are still very new and didn’t prove themselves in long run);\nDebugging and testing problems.\n\nTop Web3 Architecture Layers Explained: Frontend, Backend, and Data\n3. DApps are not actually decentralized 😦\nhttps://medium.com/media/c08d0842e15c433a08bd053ce2095f5c/href\nTechnically — yes, DApps are residing in blockchain and fueled with crypto, but some had to create this blockchain campaign and launch the token. If you take a look at the stats:\n\nYou will notice that a large part of the blockchain industry is controlled by vulture capitalists and silicon valley insiders. If you are planning to build your Web 3.0 app in some of the blockchains, be aware that it can be shot down anytime by the manipulation of some limited group of people who own the major crypto market.\n4. No benefit for mainstream businesses\nhttps://medium.com/media/c968eae722889a93da85627986ddcf3b/href\nTheoretically, any web application can be built using the Web 3 stack. Well, cryptocurrency, blockchain, decentralization sound great, but what is the point to convert your business to a decentralized application, it is equal to giving away your assets for no reason. There is no clear understanding of why everyone has to do it, for example, banks. Too many people are working in the financial industry, and making life on it, and suddenly, they have to give up their job and business. Blockchain technology is powerful and perspective, but it will take time to find the best use of it.\n5. Crypto crush will ruin all Web 3 perspectives\nhttps://medium.com/media/d92b13df413799680e53d42a21f56a0c/href\nCryptocurrency (tokens) — are the main source of payment for any transactions in the blockchain, and there is no way Web 3 can exist without it. And cryptocurrency doesn’t bring any other values, you can not buy a house or car using crypto or NFT. It makes the crypto market quite fragile. Ironically, it exists only because of groups of enthusiasts and speculators. On the other hand, the price of some cryptocurrencies is skyrocketing without any meaningful reason. Such a bubble can explode at any time, and a domino effect will make Web 3 fade in the past.\nConclusion\nThere are still a lot of issues to solve in Web 3 to make it more human-friendly. For some people, it will be a major argument to exclude such technologies from their life, because such a future will never come true, and they will be right. For others, it will be a huge opportunity to make this future closer and take a benefit of it. Some smart human said: “Pessimism sounds smart, but optimism makes money.”\nAnd if it goes mainstream you will be glad that you started early.\nThank you for reading, let me know if you learned something new. If you don't want to be scummed by crypto, follow me on medium and learn more about Web 3.\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\n\nLearn More\n\n🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon & LinkedIn\n🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend\n🔥 How Micro Frontend changes the Future of Angular?\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter. Get exclusive access to writing opportunities and advice in our community Discord.\n\n5 Reasons Why Web 3 Will Fail was originally published in JavaScript in Plain English on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/57237e4c3db",
    "categories": [
      "cryptocurrency",
      "web-development",
      "programming",
      "blockchain",
      "javascript"
    ],
    "isoDate": "2022-01-24T05:09:15.000Z"
  },
  {
    "creator": "Vitalii Shevchuk",
    "title": "Top Web3 Architecture Layers Explained: Frontend, Backend, and Data",
    "link": "https://javascript.plainenglish.io/top-3-web-3-0-architecture-layers-explained-frontend-backend-and-data-e10200f7fc76?source=rss-e3c7b0002690------2",
    "pubDate": "Tue, 18 Jan 2022 07:16:40 GMT",
    "content:encoded": "<h3>🔥 Top Web3 Architecture Layers Explained: Frontend, Backend, and Data</h3><h4>The Web 3.0 architecture may be confusing, but we will make the understanding clear</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MZmJfa-9wIl3uTt5pygIag.png\" /></figure><h3>Content</h3><ul><li><a href=\"#f5df\"><strong>Intro</strong></a></li><li><a href=\"#1562\"><strong>Backend Layer in Web 3.0 DApp</strong></a></li><li><a href=\"#891b\"><strong>Frontend Layer in Web 3.0 DApp</strong></a></li><li><a href=\"#8b00\"><strong>Data Layer in Web 3.0 DApp</strong></a></li><li><a href=\"#82d6\"><strong>Conclusion</strong></a></li><li><a href=\"#c500\"><strong>The Blog is fueled with Cappuccino</strong></a></li><li><a href=\"#9a54\"><strong>Learn More</strong></a></li></ul><h3>Intro</h3><p>When we talk about <strong>Web 3.0</strong> architecture we mean <strong>DApps,</strong> which stands for decentralized applications. Historically, <strong>Web 2.0</strong> architecture consists of the most familiar to us components:</p><ul><li><strong>frontend</strong> — a client-side application that the browser fetches from the host server and renders to the user. Usually written in 🅰️ <strong>Angular</strong>, ⚛️ <strong>React</strong>, and any other trendy framework;</li><li><strong>backend</strong> — a server-side application (in some cases — serverless, means stored in the cloud). Usually, an application, that takes over all the heavy logic including managing the database. It is interacting with the <strong>client-side</strong> through the API and is written using one of the popular backend languages: <strong>JAVA</strong>, <strong>NodeJs</strong>, <strong>C#</strong>, <strong>GO,</strong> <strong>Ruby</strong>, <strong>Python</strong>.</li><li><strong>database</strong> — it could be <strong>NoSQL</strong> or <strong>SQL</strong> database servers. Basically storing all the client and server data. The most popular databases are <strong>Postgresql</strong>, <strong>Mongo</strong>.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8n9vU4cIOqe4phrmHdjIrA.png\" /></figure><p>Of course, there are way more components, depending on scalability, but this is out of our topic. <strong><em>The main question is what is the difference between Web 2.0 and Web 3.0?</em></strong></p><h3>Backend Layer in Web 3.0 DApp</h3><p>The major difference of <strong>DApp</strong> is decentralization. You don’t need a centralized database or web server, you take advantage of blockchain to distribute the application between the network of computers. The blockchain will act as a “<strong>state machine</strong>” 🤖 — maintaining the program state and stability through validating the predefined rules. The state machine is spread between all the participants of a blockchain network and validation is archived through the <strong>consensus</strong> about program stability.</p><p>The <strong>backend</strong> logic is implemented via <strong>smart contracts</strong> that will be later deployed to shared <strong>state machines </strong>(blockchain network). So backend resides in a peer-to-peer network that everyone can contribute by matching some criteria (ex. owning and locking cryptocurrency in order to vote the changes or make a proposal to the program). <strong>But how the front end works then?</strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cXWnSYwoGO1zR6ASBBczHg.png\" /></figure><h3>Frontend Layer in Web 3.0 DApp</h3><p>The main <strong>frontend</strong> architecture in the case of <strong>DApp</strong> is focused on communication with <strong>smart contracts</strong> (decentralized programs). And it will differ from the common frontend-backend communication.</p><p>Every node in the blockchain network is carrying the state of the program, and if you want to communicate with the <strong>smart contract, </strong>you have to communicate with one of the nodes, it could be:</p><ul><li>Third-party node <strong>providers</strong>, like <a href=\"https://infura.io/\"><strong>Infura</strong></a><strong>, </strong><a href=\"https://www.alchemy.com/\"><strong>Alchemy</strong></a><strong>, and </strong><a href=\"https://www.quicknode.com/\"><strong>Quicknode</strong></a></li><li>Or set up your own node by running the <strong>state machine</strong> yourself;</li></ul><p>To launch the blockchain infrastructure may be quite challenging, especially when you want to scale it to add more nodes. There is when a user <strong>provides</strong> will be handy, the downside is it creates a centralized dependency component.</p><p>All <strong>providers</strong> are implementing <strong>JSON</strong>-<strong>RPC</strong> specifications to communicate with the blockchain networks. <strong>RPC,</strong> or <strong>Remote Procedure Call — </strong>is a request-response protocol that defines the rules to allow the client to send the message to the remote machine to execute the function and retrieve the response. In such a communication, the program runs as it is located on the client machine, meaning the client doesn&#39;t know about the remote machine. All the communication is going through <strong>HTTP</strong> or <strong>Web Sockets</strong>.</p><p>When <strong>providers</strong> are connected to the <strong>blockchain, the </strong>client is able to get information about the <strong>state</strong> <strong>of</strong> the <strong>blockchain</strong>.<strong> But how do clients write to the blockchain network? </strong>All the <strong>write</strong> <strong>requests transactions</strong> need to be <strong>signed</strong> with the client&#39;s <strong>private key</strong>. Each <strong>transaction</strong> will cost a client a<strong> gas fee</strong> is a cryptocurrency that will go to appreciate other nodes (<strong>miners</strong>) which verify the <strong>transactions</strong>.</p><p>Such a <strong>provider</strong>, like <a href=\"https://metamask.io/\"><strong>Metamask</strong></a>, is acting like a <strong>transaction</strong> <strong>signer</strong> and <strong>provider</strong>. It stores the <strong>private key</strong> in the browser and signs when the client makes a transaction request, it also connects to the blockchain network.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WtwhfJxNEKgWZjrGe70tuA.png\" /></figure><h3>Data Layer in Web 3.0 DApp</h3><blockquote>💡 It is your data, just Own it !</blockquote><p>Storing the data in <strong>blockchain</strong> could be quite costly due to <strong>transaction gas fees</strong>, and it is more reasonable to use non a blockchain solution like peer-to-peer storage — <a href=\"https://ipfs.io/\"><strong>IPFS</strong></a> or <a href=\"https://www.ethswarm.org/\"><strong>Swarm</strong></a>.</p><p><a href=\"https://ipfs.io/\"><strong>IPFS</strong></a> — is a peer-to-peer file system protocol, that allows you to store data across a network of machines. Without native support of popular browsers, IPFT uses <a href=\"https://blog.stacktical.com/ipfs/gateway/dapp/2019/09/21/ipfs-server-google-cloud-platform.html\"><strong>private</strong></a> or <a href=\"https://ipfs.github.io/public-gateway-checker/\"><strong>public</strong></a> gateways to connect to the network.</p><p><a href=\"https://www.ethswarm.org/\"><strong>Swarm</strong></a> — is similar to IPFT, with the only difference that the system sustains through the <strong>smart contracts</strong> in the Ethereum blockchain network.</p><p>In order to make your frontend be decentralized as well, you may use the same peer-to-peer storage solutions.</p><p>And finally for simplifying querying the data stored in blockchain or peer-to-peer network <a href=\"https://thegraph.com/en/\"><strong>The Graph</strong></a>. It converts GraphQL queries into smart contract events and peer-to-peer gateways.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Z1GyLh9sxEtzX_h8TjxrAQ.png\" /></figure><h3>Conclusion</h3><p>The <strong>Web 3.0 DApp</strong> architecture may look quite overwhelming 🤯. It is, but there are more tools appearing that are aiming to simplify the building experience, like <a href=\"https://hardhat.org/\"><strong>hardhat</strong></a><strong> </strong>and<strong> </strong><a href=\"https://thirdweb.com/\"><strong>thirdweb</strong></a><strong>. </strong>But don’t be skeptical:</p><p><em>If you want to learn how to build web applications with </em><strong><em>web 3.0 stack</em></strong><em>, </em><strong><em>clap</em></strong><em>👏 and </em><strong><em>follow</em></strong><em> me in </em><strong><em>medium</em></strong><em> and </em><a href=\"https://twitter.com/EasyWebOrg\"><strong><em>twitter</em></strong></a><em>, I am working on tutorial to building NFT marketplace, click follow if you don’t want to miss it. 😉</em></p><ul><li><a href=\"https://easy-web.medium.com/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://easy-web.medium.com/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li><li><a href=\"https://www.buymeacoffee.com/easyweb\">easyweb is Making web development easy for everyone through tutorials and blogs</a></li></ul><h3>Learn More</h3><ul><li><a href=\"https://javascript.plainenglish.io/top-18-web-3-0-trends-every-frontend-developer-has-to-follow-in-2022-2861f9b63627\">🔥 Top 18 Web 3.0 Trends Every Frontend Developer Has to Follow in 2022</a></li><li><a href=\"https://javascript.plainenglish.io/what-do-you-need-to-know-about-new-era-of-internet-web-3-0-as-a-frontend-developer-55e51f2cd03f\">🔥What You Need to Know About the New Era of Internet Web 3.0 As a Frontend Developer</a></li><li><a href=\"https://itnext.io/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon &amp; LinkedIn</a></li></ul><p><em>More content at </em><a href=\"http://plainenglish.io/\"><strong><em>plainenglish.io</em></strong></a><em>. Sign up for our </em><a href=\"http://newsletter.plainenglish.io/\"><strong><em>free weekly newsletter</em></strong></a><em>. Get exclusive access to writing opportunities and advice in our </em><a href=\"https://discord.gg/GtDtUAvyhW\"><strong><em>community Discord</em></strong></a><em>.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e10200f7fc76\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://javascript.plainenglish.io/top-3-web-3-0-architecture-layers-explained-frontend-backend-and-data-e10200f7fc76\">Top Web3 Architecture Layers Explained: Frontend, Backend, and Data</a> was originally published in <a href=\"https://javascript.plainenglish.io\">JavaScript in Plain English</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "🔥 Top Web3 Architecture Layers Explained: Frontend, Backend, and Data\nThe Web 3.0 architecture may be confusing, but we will make the understanding clear\n\nContent\n\nIntro\nBackend Layer in Web 3.0 DApp\nFrontend Layer in Web 3.0 DApp\nData Layer in Web 3.0 DApp\nConclusion\nThe Blog is fueled with Cappuccino\nLearn More\n\nIntro\nWhen we talk about Web 3.0 architecture we mean DApps, which stands for decentralized applications. Historically, Web 2.0 architecture consists of the most familiar to us components:\n\nfrontend — a client-side application that the browser fetches from the host server and renders to the user. Usually written in 🅰️ Angular, ⚛️ React, and any other trendy framework;\nbackend — a server-side application (in some cases — serverless, means stored in the cloud). Usually, an application, that takes over all the heavy logic including managing the database. It is interacting with the client-side through the API and is written using one of the popular backend languages: JAVA, NodeJs, C#, GO, Ruby, Python.\ndatabase — it could be NoSQL or SQL database servers. Basically storing all the client and server data. The most popular databases are Postgresql, Mongo.\n\nOf course, there are way more components, depending on scalability, but this is out of our topic. The main question is what is the difference between Web 2.0 and Web 3.0?\nBackend Layer in Web 3.0 DApp\nThe major difference of DApp is decentralization. You don’t need a centralized database or web server, you take advantage of blockchain to distribute the application between the network of computers. The blockchain will act as a “state machine” 🤖 — maintaining the program state and stability through validating the predefined rules. The state machine is spread between all the participants of a blockchain network and validation is archived through the consensus about program stability.\nThe backend logic is implemented via smart contracts that will be later deployed to shared state machines (blockchain network). So backend resides in a peer-to-peer network that everyone can contribute by matching some criteria (ex. owning and locking cryptocurrency in order to vote the changes or make a proposal to the program). But how the front end works then?\n\nFrontend Layer in Web 3.0 DApp\nThe main frontend architecture in the case of DApp is focused on communication with smart contracts (decentralized programs). And it will differ from the common frontend-backend communication.\nEvery node in the blockchain network is carrying the state of the program, and if you want to communicate with the smart contract, you have to communicate with one of the nodes, it could be:\n\nThird-party node providers, like Infura, Alchemy, and Quicknode\nOr set up your own node by running the state machine yourself;\n\nTo launch the blockchain infrastructure may be quite challenging, especially when you want to scale it to add more nodes. There is when a user provides will be handy, the downside is it creates a centralized dependency component.\nAll providers are implementing JSON-RPC specifications to communicate with the blockchain networks. RPC, or Remote Procedure Call — is a request-response protocol that defines the rules to allow the client to send the message to the remote machine to execute the function and retrieve the response. In such a communication, the program runs as it is located on the client machine, meaning the client doesn't know about the remote machine. All the communication is going through HTTP or Web Sockets.\nWhen providers are connected to the blockchain, the client is able to get information about the state of the blockchain. But how do clients write to the blockchain network? All the write requests transactions need to be signed with the client's private key. Each transaction will cost a client a gas fee is a cryptocurrency that will go to appreciate other nodes (miners) which verify the transactions.\nSuch a provider, like Metamask, is acting like a transaction signer and provider. It stores the private key in the browser and signs when the client makes a transaction request, it also connects to the blockchain network.\n\nData Layer in Web 3.0 DApp\n💡 It is your data, just Own it !\nStoring the data in blockchain could be quite costly due to transaction gas fees, and it is more reasonable to use non a blockchain solution like peer-to-peer storage — IPFS or Swarm.\nIPFS — is a peer-to-peer file system protocol, that allows you to store data across a network of machines. Without native support of popular browsers, IPFT uses private or public gateways to connect to the network.\nSwarm — is similar to IPFT, with the only difference that the system sustains through the smart contracts in the Ethereum blockchain network.\nIn order to make your frontend be decentralized as well, you may use the same peer-to-peer storage solutions.\nAnd finally for simplifying querying the data stored in blockchain or peer-to-peer network The Graph. It converts GraphQL queries into smart contract events and peer-to-peer gateways.\n\nConclusion\nThe Web 3.0 DApp architecture may look quite overwhelming 🤯. It is, but there are more tools appearing that are aiming to simplify the building experience, like hardhat and thirdweb. But don’t be skeptical:\nIf you want to learn how to build web applications with web 3.0 stack, clap👏 and follow me in medium and twitter, I am working on tutorial to building NFT marketplace, click follow if you don’t want to miss it. 😉\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\neasyweb is Making web development easy for everyone through tutorials and blogs\n\nLearn More\n\n🔥 Top 18 Web 3.0 Trends Every Frontend Developer Has to Follow in 2022\n🔥What You Need to Know About the New Era of Internet Web 3.0 As a Frontend Developer\n🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon & LinkedIn\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter. Get exclusive access to writing opportunities and advice in our community Discord.\n\nTop Web3 Architecture Layers Explained: Frontend, Backend, and Data was originally published in JavaScript in Plain English on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/e10200f7fc76",
    "categories": [
      "cryptocurrency",
      "blockchain",
      "programming",
      "javascript",
      "web-development"
    ],
    "isoDate": "2022-01-18T07:16:40.000Z"
  },
  {
    "creator": "Vitalii Shevchuk",
    "title": "What You Need to Know About the New Era of Internet Web 3.0 As a Frontend Developer",
    "link": "https://javascript.plainenglish.io/what-do-you-need-to-know-about-new-era-of-internet-web-3-0-as-a-frontend-developer-55e51f2cd03f?source=rss-e3c7b0002690------2",
    "pubDate": "Tue, 11 Jan 2022 05:52:16 GMT",
    "content:encoded": "<h4>What the future of Internet Web 3.0 looks like and where we are.</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CdIpRqUs5ory37RgSNXElQ.png\" /></figure><h3>Content</h3><ul><li><a href=\"#9d78\"><strong>Intro</strong></a></li><li><a href=\"#cc34\"><strong>Paleolithic or Static Age of Web 1.0</strong></a></li><li><a href=\"#79dc\"><strong>Mesolithic or Big Data Age of Web 2.0</strong></a></li><li><a href=\"#8172\"><strong>Neolithic or Blockchain Age of Web 3.0</strong></a></li><li><a href=\"#4b29\"><strong>Top 18 Web 3.0 Trends every Frontend Developer has to Follow in 2022</strong></a></li><li><a href=\"#fda7\"><strong>Conclusion</strong></a></li><li><a href=\"#dc4a\"><strong>Learn More</strong></a></li></ul><h3>Intro</h3><p>Web 3.0 discussion boosted again after Mark Zukerberg showed a small presentation about renaming Facebook into Meta and defining the direction of the company to build meta-universe. It made a domino fall and other big tech started to reveal their plans and vision on meta-universe. No doubt, that it will affect on all aspects of our life and of course on the perception of the internet. It accelerated the transition to a new version of the internet — called Web 3.0.</p><p>There are a lot of explanations of Web 3.0 but none of them are clear enough. The reason is that it is hard to define exactly what Web 3.0 is, as there is no strict definition. Web 3.0 usually builds an association with <strong>meta-universe</strong>, <strong>blockchain,</strong> and <strong>cryptocurrencies</strong>. And it is partially true, all these technologies are already shaping the modern internet. Moreover, it may require more time, and no one knows how much exactly, to have a clear vision of what is Web 3.0. For example, it took around 10 years of transition from Web 1.0 to Web 2.0. In this article, we will briefly summarize the evolution of the internet and will find out where we are moving to.</p><h3>Paleolithic or Static Age of Web 1.0</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2Fsrdl5iQZ8XGX6%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2Fsrdl5iQZ8XGX6%2Fgiphy-downsized.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2Fsrdl5iQZ8XGX6%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"240\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/da22af77e7c16f910700b2a0d474bc8f/href\">https://medium.com/media/da22af77e7c16f910700b2a0d474bc8f/href</a></iframe><p>The first stage of internet evolution or <strong>Web 1.0</strong> started in 1991 and last till 2004. Most of the websites of that era — are simply static pages, with text and images. You can not do anything else rather than read the text. Popular are portfolio sites that represent a person or a business. <strong><em>Users are consumers</em></strong>, they can see the same content and only can read it like a newspaper. Internet is not protected, users could catch the virus by clicking malicious links. The websites are not profitable, ads are not targeting and don’t work. The site started to be more dynamic after technologies like flash and javascript came into play. 👴</p><h3><strong>Mesolithic or Big Data Age of </strong>Web 2.0</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FAXorq76Tg3Vte%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FAXorq76Tg3Vte%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FAXorq76Tg3Vte%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"244\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/eadb1cadc3d6a05b2b6c63dbcf4f0d77/href\">https://medium.com/media/eadb1cadc3d6a05b2b6c63dbcf4f0d77/href</a></iframe><blockquote>“The Only Constant in Life Is Change.”- Heraclitus</blockquote><p>The era of <strong>Web 2.0</strong> started in 2004 and we are still there. Instead of read-only websites, users started to interact with them: make a post, communicate, buy and sell, use it as a piece of software. All users can see different content, which depends on their interests. It could be only possible because of collecting the user data and analysis. Data Science and Machine Learning are the major tools to generate the targeting content. Data is created by users, but it doesn&#39;t belong to them, it is stored and managed by big tech, with <em>no privacy</em>. Companies are using it to show ads that try to predict user needs. <strong><em>Users are products</em></strong>.</p><h3>Neolithic or Blockchain Age <strong>of </strong>Web 3.0</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FxTiQyI0qPIYaMzyyVa%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FxTiQyI0qPIYaMzyyVa%2Fgiphy-downsized.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FxTiQyI0qPIYaMzyyVa%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"244\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/436cdfdf3c339bfdcec94e80139da72a/href\">https://medium.com/media/436cdfdf3c339bfdcec94e80139da72a/href</a></iframe><p>And here we are, a new upcoming era — Web 3.0. In Web 3.0 — <strong>users are the owners</strong> of the information. The data, companies, services are owned and managed by decentralized <strong>blockchain </strong>network DAO (Decentralized Autonomous Organization). There is no CEO or president, companies will have to convert to DAO. All the services are <em>open-source</em> and changes of the service are made through the <strong><em>consensus</em></strong> between users. All data transfer is private and information is secure. Digital assets are secure from the copyright and assigned to <strong><em>NFT </em></strong>(unique token stored in the blockchain). All the financial transactions are made with crypto, which makes it faster and more secure. Each of the users is anonymous and hidden behind the virtual avatar. Users can connect to different virtual worlds and interact with 3d models and other people.</p><p>Sounds like science fiction, but it is what is already happening. The transition is only accelerating over time. Blockchain is a revolutionary technology that will reinvent all industries and set up a new standard. If you don’t want to miss your opportunity and get prepared for Web 3.0 Trends.<strong> </strong><a href=\"https://medium.com/@easy-web/subscribe\"><strong>Subscribe</strong></a><strong> and </strong><a href=\"https://medium.com/@easy-web/membership\"><strong>follow me in medium</strong></a><strong> to get updated. Also, check more about terms that were used in this article and get familiar with all Web 3.0 Trends in the article below.</strong></p><blockquote>The next in the blog roadmap are topics like: <strong>Web 3.0 Application Architecture</strong> and <strong>How to Build a Web 3.0 app</strong>. If you want to see this content, let’s collects <strong>2000 👏</strong></blockquote><h3>Top 18 Web 3.0 Trends every Frontend Developer has to Follow in 2022</h3><p><a href=\"https://medium.com/@easy-web/top-18-web-3-0-trends-every-frontend-developer-has-to-follow-in-2022-2861f9b63627\">🔥 Top 18 Web 3.0 Trends every Frontend Developer has to Follow in 2022</a></p><h3>Conclusion</h3><p>We are still at the beginning of the transition to Web 3.0 and there is a long way to go. The first reason is that blockchain has challenged too many powerful organizations: global corporations, banks, and what is even more — the government. As it is aiming to take over the power from them and make it decentralized. If it is not a <strong>democracy</strong>, that what is it then? 😛 On the other hand, a new generation is growing up, they are spending a huge portion of their life in games (metaverse) already, they know about digital transactions in the game, and about cryptocurrency and blockchain. And when they start to replace us, they will have different requirements for the market. It will force businesses to adapt and we will face a new era of the Internet.</p><ul><li><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://medium.com/@easy-web/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li></ul><h3>Learn More</h3><ul><li><a href=\"https://medium.com/@easy-web/top-18-web-3-0-trends-every-frontend-developer-has-to-follow-in-2022-2861f9b63627\">🔥 Top 18 Web 3.0 Trends every Frontend Developer has to Follow in 2022</a></li><li><a href=\"https://javascript.plainenglish.io/building-beautiful-tiktok-clone-with-angular-and-micro-frontend-part-1-bdd189425695\">🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend</a></li><li><a href=\"https://itnext.io/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon &amp; LinkedIn</a></li></ul><p><em>More content at </em><a href=\"http://plainenglish.io/\"><strong><em>plainenglish.io</em></strong></a><em>. Sign up for our </em><a href=\"http://newsletter.plainenglish.io/\"><strong><em>free weekly newsletter</em></strong></a><em>. Get exclusive access to writing opportunities and advice in our </em><a href=\"https://discord.gg/GtDtUAvyhW\"><strong><em>community Discord</em></strong></a><em>.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=55e51f2cd03f\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://javascript.plainenglish.io/what-do-you-need-to-know-about-new-era-of-internet-web-3-0-as-a-frontend-developer-55e51f2cd03f\">🔥What You Need to Know About the New Era of Internet Web 3.0 As a Frontend Developer</a> was originally published in <a href=\"https://javascript.plainenglish.io\">JavaScript in Plain English</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "What the future of Internet Web 3.0 looks like and where we are.\n\nContent\n\nIntro\nPaleolithic or Static Age of Web 1.0\nMesolithic or Big Data Age of Web 2.0\nNeolithic or Blockchain Age of Web 3.0\nTop 18 Web 3.0 Trends every Frontend Developer has to Follow in 2022\nConclusion\nLearn More\n\nIntro\nWeb 3.0 discussion boosted again after Mark Zukerberg showed a small presentation about renaming Facebook into Meta and defining the direction of the company to build meta-universe. It made a domino fall and other big tech started to reveal their plans and vision on meta-universe. No doubt, that it will affect on all aspects of our life and of course on the perception of the internet. It accelerated the transition to a new version of the internet — called Web 3.0.\nThere are a lot of explanations of Web 3.0 but none of them are clear enough. The reason is that it is hard to define exactly what Web 3.0 is, as there is no strict definition. Web 3.0 usually builds an association with meta-universe, blockchain, and cryptocurrencies. And it is partially true, all these technologies are already shaping the modern internet. Moreover, it may require more time, and no one knows how much exactly, to have a clear vision of what is Web 3.0. For example, it took around 10 years of transition from Web 1.0 to Web 2.0. In this article, we will briefly summarize the evolution of the internet and will find out where we are moving to.\nPaleolithic or Static Age of Web 1.0\nhttps://medium.com/media/da22af77e7c16f910700b2a0d474bc8f/href\nThe first stage of internet evolution or Web 1.0 started in 1991 and last till 2004. Most of the websites of that era — are simply static pages, with text and images. You can not do anything else rather than read the text. Popular are portfolio sites that represent a person or a business. Users are consumers, they can see the same content and only can read it like a newspaper. Internet is not protected, users could catch the virus by clicking malicious links. The websites are not profitable, ads are not targeting and don’t work. The site started to be more dynamic after technologies like flash and javascript came into play. 👴\nMesolithic or Big Data Age of Web 2.0\nhttps://medium.com/media/eadb1cadc3d6a05b2b6c63dbcf4f0d77/href\n“The Only Constant in Life Is Change.”- Heraclitus\nThe era of Web 2.0 started in 2004 and we are still there. Instead of read-only websites, users started to interact with them: make a post, communicate, buy and sell, use it as a piece of software. All users can see different content, which depends on their interests. It could be only possible because of collecting the user data and analysis. Data Science and Machine Learning are the major tools to generate the targeting content. Data is created by users, but it doesn't belong to them, it is stored and managed by big tech, with no privacy. Companies are using it to show ads that try to predict user needs. Users are products.\nNeolithic or Blockchain Age of Web 3.0\nhttps://medium.com/media/436cdfdf3c339bfdcec94e80139da72a/href\nAnd here we are, a new upcoming era — Web 3.0. In Web 3.0 — users are the owners of the information. The data, companies, services are owned and managed by decentralized blockchain network DAO (Decentralized Autonomous Organization). There is no CEO or president, companies will have to convert to DAO. All the services are open-source and changes of the service are made through the consensus between users. All data transfer is private and information is secure. Digital assets are secure from the copyright and assigned to NFT (unique token stored in the blockchain). All the financial transactions are made with crypto, which makes it faster and more secure. Each of the users is anonymous and hidden behind the virtual avatar. Users can connect to different virtual worlds and interact with 3d models and other people.\nSounds like science fiction, but it is what is already happening. The transition is only accelerating over time. Blockchain is a revolutionary technology that will reinvent all industries and set up a new standard. If you don’t want to miss your opportunity and get prepared for Web 3.0 Trends. Subscribe and follow me in medium to get updated. Also, check more about terms that were used in this article and get familiar with all Web 3.0 Trends in the article below.\nThe next in the blog roadmap are topics like: Web 3.0 Application Architecture and How to Build a Web 3.0 app. If you want to see this content, let’s collects 2000 👏\nTop 18 Web 3.0 Trends every Frontend Developer has to Follow in 2022\n🔥 Top 18 Web 3.0 Trends every Frontend Developer has to Follow in 2022\nConclusion\nWe are still at the beginning of the transition to Web 3.0 and there is a long way to go. The first reason is that blockchain has challenged too many powerful organizations: global corporations, banks, and what is even more — the government. As it is aiming to take over the power from them and make it decentralized. If it is not a democracy, that what is it then? 😛 On the other hand, a new generation is growing up, they are spending a huge portion of their life in games (metaverse) already, they know about digital transactions in the game, and about cryptocurrency and blockchain. And when they start to replace us, they will have different requirements for the market. It will force businesses to adapt and we will face a new era of the Internet.\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\n\nLearn More\n\n🔥 Top 18 Web 3.0 Trends every Frontend Developer has to Follow in 2022\n🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend\n🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon & LinkedIn\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter. Get exclusive access to writing opportunities and advice in our community Discord.\n\n🔥What You Need to Know About the New Era of Internet Web 3.0 As a Frontend Developer was originally published in JavaScript in Plain English on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/55e51f2cd03f",
    "categories": [
      "javascript",
      "cryptocurrency",
      "front-end-development",
      "web-development",
      "programming"
    ],
    "isoDate": "2022-01-11T05:52:16.000Z"
  },
  {
    "creator": "Vitalii Shevchuk",
    "title": " Top 18 Web 3.0 Trends Every Frontend Developer Has to Follow in 2022",
    "link": "https://itnext.io/top-18-web-3-0-trends-every-frontend-developer-has-to-follow-in-2022-2861f9b63627?source=rss-e3c7b0002690------2",
    "pubDate": "Tue, 11 Jan 2022 05:51:42 GMT",
    "content:encoded": "<p>This list will show the new opportunities Web 3.0 can bring and may inspire on the next millions dollar idea. 😜</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*i5G82a0UGtqoP07zVkuL-A.png\" /></figure><h3>Content</h3><ul><li><a href=\"#6981\"><strong>Intro</strong></a></li><li><a href=\"#4ac6\"><strong>Glossary</strong></a></li><li><a href=\"#b822\"><strong>Conclusion</strong></a></li><li><a href=\"#729e\"><strong>Learn More</strong></a></li></ul><h3>Intro</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FIeWYw5Tz5TbZhQYX35%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FIeWYw5Tz5TbZhQYX35%2Fgiphy-downsized.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FIeWYw5Tz5TbZhQYX35%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"306\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/14d17228cf76e215d3d298362506d43d/href\">https://medium.com/media/14d17228cf76e215d3d298362506d43d/href</a></iframe><p>Hey crypto punks<strong>, Web 3.0</strong> is becoming a hot topic again after hyping around <strong>Metaverse</strong>. People started eagerly buying mining farms to get prepared for a new cryptocurrency boom. For such people like us, frontend developers, it is important to know what is going on with <strong>web game</strong> and what we have to be prepared for. A new architecture of the internet is opening new opportunities, and knowing them, will give you the advantage to pick up some technologies upfront or even inspire you on your own project. The opportunities are limitless and reshape all the industries. I made a compilation of the most trendy terms which everyone needs to be familiar with to make the transition to Web 3.0 smooth, <strong>enjoy reading, and don’t forget to clap 👏 if you learned something new.</strong></p><h3>Glossary</h3><p><a href=\"https://www.usatoday.com/story/tech/2021/11/10/metaverse-what-is-it-explained-facebook-microsoft-meta-vr/6337635001/\"><strong>Metaverse</strong></a> —is a network of 3D virtual worlds where people avatars can interact with digital objects and with other people.</p><p><a href=\"https://www.investopedia.com/terms/b/blockchain.asp\"><strong>Blockchain</strong></a> — decentralized database, that stores data across a network of computers (called <strong>nodes</strong>). The data is split into <strong>blocks </strong>that are linked using cryptography. When new data is pushed into the blockchain, it fills an empty block that is further linked to other blocks, creating a chronological order chain. The data in the blockchain is not revertable, it is stored forever, and anyone can view it.</p><p><a href=\"https://www.investopedia.com/terms/c/cryptocurrency.asp\"><strong>Cryptocurrency</strong></a> (“<strong>crypto</strong>”) — a decentralized digital currency, created using cryptographic techniques. Crypto is decentralized, which means, it is independent of a monetary authority like banks and government. Everyone can issue the cryptocurrency (<strong>mine</strong>), buy, sell or trade without limits and control. Transactions are secure and much faster than traditional currency.</p><p><a href=\"https://www.coinbase.com/learn/crypto-basics/what-is-a-crypto-wallet\"><strong>Crypto Wallet </strong></a>— software or device for storing cryptocurrency and making <strong>crypto </strong>transactions.</p><p><a href=\"https://metamask.io/\"><strong>Metamask</strong></a> — popular browser extension and mobile app. It acts as a crypto wallet and gateway to <strong>blockchain</strong> apps.</p><p><a href=\"https://www.investopedia.com/tech/how-does-bitcoin-mining-work/\"><strong>Miner</strong></a> (cryptocurrency) — <strong>nodes</strong> in the <strong>blockchain</strong>. Each of the miners is guessing a 64-digit hexadecimal number, a <strong>token, </strong>that<strong> </strong>is generated during the transaction (inserting a new record into the blockchain). At the same time, miners are verifying the transactions: checking the source, checking a double-spending of the money, checking if transaction volume is within the allowed range. Miners are rewarded with crypto for verifying the block of transactions that were added to the <strong>blockchain</strong>.</p><p><a href=\"https://ethereum.org/en/developers/docs/gas/#:~:text=Gas%20refers%20to%20the%20fee,a%20transaction%20on%20Ethereum%20successfully.&amp;text=Gas%20fees%20are%20paid%20in,(10%2D9%20ETH).\"><strong>Gas Fee</strong> </a>— the amount of cryptocurrency that users pay miners in order to include their transactions into the <strong>blockchain</strong>.</p><p><a href=\"https://www.investopedia.com/terms/c/crypto-token.asp#:~:text=What%20is%20a%20crypto%20token,for%20investment%20or%20economic%20purposes.\"><strong>Token</strong></a> — is usually a random string or a number. In cryptocurrency, it can have different meanings:</p><ul><li>token — any cryptocurrency, but not Bitcoin and Ethereum (they usually called <strong>coins</strong>, but technically, they are tokens too);</li><li>token — a cryptocurrency that uses other cryptocurrency’s infrastructure (blockchain). The token can become a coin if it has its own blockchain;</li><li>token — can be a representation of digital asset (<strong>NFT</strong>);</li></ul><p><a href=\"https://www.investopedia.com/terms/s/smart-contracts.asp\"><strong>NFT</strong></a> — or Nonfungible token — is a unique token stored in a <strong>blockchain</strong> that represents digital assets, like music, image, art, 3d models. Nonfungible means unique and non-interchangeable.</p><p><a href=\"https://www.investopedia.com/terms/s/smart-contracts.asp\"><strong>Smart contract</strong></a><strong> </strong>— a decentralized program that is stored in <strong>blockchain</strong>, and called when participants satisfy preconditions. It is similar to a vendor machine. It executes when the buyer inserted the card to pay. It allows you to choose the drink, and after a drink is released, transfers money to the seller. <strong>Automated</strong>, <strong>safe</strong>, and <strong>fast</strong>. A<strong> smart contract</strong> could be any service: money transfer, voting during elections, changing property owner, basically, anything that requires human in between.</p><p><a href=\"https://www.investopedia.com/terms/i/initial-coin-offering-ico.asp\"><strong>ICO</strong></a> — Initial Coin Offering, similar to IPO (Initial Public Offering) — is an organization that allows you to raise the funds for products and services based on cryptocurrency.</p><p><a href=\"https://ethereum.org/en/dapps/\"><strong>DApp</strong></a> — Decentralized application — are software applications that run inside a <strong>blockchain</strong> network. <strong>DApps</strong> run on a decentralized environment, is public and open-source, doesn’t have a single authority.</p><p><a href=\"https://www.investopedia.com/decentralized-finance-defi-5113835\"><strong>DeFi</strong></a> — <strong>decentralized finance </strong>service resided in <strong>blockchain</strong>, which substitutes all the services that banks can provide.</p><p><a href=\"https://ethereum.org/en/dao/\"><strong>DAO</strong></a> — Decentralized Autonomous Organization — is an open-source platform running on a blockchain network that allows users, collectively manage the code. The rules are built in the code and enforced through <strong>smart contracts</strong>. In order to vote for proposals, users have to own and lock cryptocurrency into a voting contract. The voting weight is proportional to the amount of cryptocurrency locked. The proposal is finalized after achieving the network <strong>consensus</strong> rule and voters are rewarded with cryptocurrency.</p><p><a href=\"https://decrypt.co/resources/consensus-protocols-what-are-they-guide-how-to-explainer\"><strong>Consensus</strong></a> — a set of rules in a blockchain system that has to be verified in order to achieve the agreement on a single data value or a single state of the network.</p><p><a href=\"https://ethereum.org/en/\"><strong>Ethereum</strong></a> — an open-source software platform that works in the public blockchain networks and focuses on running <strong>DApps</strong> applications. It also has its own <strong>cryptocurrency</strong> for making payments inside the network, called <strong>Ether</strong>.</p><p><a href=\"https://ethereum.org/en/developers/docs/evm/\"><strong>EVM</strong></a> — Ethereum Virtual Machine — runtime environment for executing <strong>smart contracts </strong>in <strong>Ethereum</strong> blockchain. Allows a secure way of running programs that spread between machines around the world.</p><p><a href=\"https://docs.soliditylang.org/en/v0.8.11/\"><strong>Solidity</strong></a> — a programming language for writing <strong>smart contracts</strong> in blockchain, such as <strong>Ethereum</strong>. The program has to be compiled in <strong>Ethereum Virtual Machine</strong>.</p><p><a href=\"https://solana.com/\"><strong>Solana</strong></a> — a blockchain that solves the major problems of scalability, transaction speed, and price, energy efficiency. It is open-source that encourages to develop the <strong>DApps</strong>.</p><h3><strong>Conclusion</strong></h3><p>I hope you feel more confident with Web 3.0 terms and learned something new today. You can always go ahead and dive deep into each topic.</p><blockquote><strong>Follow me on Medium if you learned anything new 🙌</strong></blockquote><blockquote><strong>Let’s collect 1000 claps 👏 if you want a tutorial how to build Web 3.0 app. This list is will continue to grow, so don’t forget to bookmark it.</strong></blockquote><ul><li><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://medium.com/@easy-web/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li></ul><h3><strong>Learn More</strong></h3><ul><li><a href=\"https://easy-web.medium.com/top-3-web-3-0-architecture-layers-explained-frontend-backend-and-data-e10200f7fc76\">🔥 Top 3 Web 3.0 Architecture Layers Explained: Frontend, Backend, and Data</a></li><li><a href=\"https://medium.com/@easy-web/what-do-you-need-to-know-about-new-era-of-internet-web-3-0-as-a-frontend-developer-55e51f2cd03f\">What do you need to Know about New Era of Internet Web 3.0 as a Frontend Developer</a></li><li><a href=\"https://javascript.plainenglish.io/building-beautiful-tiktok-clone-with-angular-and-micro-frontend-part-1-bdd189425695\">🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend</a></li><li><a href=\"https://itnext.io/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon &amp; LinkedIn</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2861f9b63627\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://itnext.io/top-18-web-3-0-trends-every-frontend-developer-has-to-follow-in-2022-2861f9b63627\">🔥 Top 18 Web 3.0 Trends Every Frontend Developer Has to Follow in 2022</a> was originally published in <a href=\"https://itnext.io\">ITNEXT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "This list will show the new opportunities Web 3.0 can bring and may inspire on the next millions dollar idea. 😜\n\nContent\n\nIntro\nGlossary\nConclusion\nLearn More\n\nIntro\nhttps://medium.com/media/14d17228cf76e215d3d298362506d43d/href\nHey crypto punks, Web 3.0 is becoming a hot topic again after hyping around Metaverse. People started eagerly buying mining farms to get prepared for a new cryptocurrency boom. For such people like us, frontend developers, it is important to know what is going on with web game and what we have to be prepared for. A new architecture of the internet is opening new opportunities, and knowing them, will give you the advantage to pick up some technologies upfront or even inspire you on your own project. The opportunities are limitless and reshape all the industries. I made a compilation of the most trendy terms which everyone needs to be familiar with to make the transition to Web 3.0 smooth, enjoy reading, and don’t forget to clap 👏 if you learned something new.\nGlossary\nMetaverse —is a network of 3D virtual worlds where people avatars can interact with digital objects and with other people.\nBlockchain — decentralized database, that stores data across a network of computers (called nodes). The data is split into blocks that are linked using cryptography. When new data is pushed into the blockchain, it fills an empty block that is further linked to other blocks, creating a chronological order chain. The data in the blockchain is not revertable, it is stored forever, and anyone can view it.\nCryptocurrency (“crypto”) — a decentralized digital currency, created using cryptographic techniques. Crypto is decentralized, which means, it is independent of a monetary authority like banks and government. Everyone can issue the cryptocurrency (mine), buy, sell or trade without limits and control. Transactions are secure and much faster than traditional currency.\nCrypto Wallet — software or device for storing cryptocurrency and making crypto transactions.\nMetamask — popular browser extension and mobile app. It acts as a crypto wallet and gateway to blockchain apps.\nMiner (cryptocurrency) — nodes in the blockchain. Each of the miners is guessing a 64-digit hexadecimal number, a token, that is generated during the transaction (inserting a new record into the blockchain). At the same time, miners are verifying the transactions: checking the source, checking a double-spending of the money, checking if transaction volume is within the allowed range. Miners are rewarded with crypto for verifying the block of transactions that were added to the blockchain.\nGas Fee — the amount of cryptocurrency that users pay miners in order to include their transactions into the blockchain.\nToken — is usually a random string or a number. In cryptocurrency, it can have different meanings:\n\ntoken — any cryptocurrency, but not Bitcoin and Ethereum (they usually called coins, but technically, they are tokens too);\ntoken — a cryptocurrency that uses other cryptocurrency’s infrastructure (blockchain). The token can become a coin if it has its own blockchain;\ntoken — can be a representation of digital asset (NFT);\n\nNFT — or Nonfungible token — is a unique token stored in a blockchain that represents digital assets, like music, image, art, 3d models. Nonfungible means unique and non-interchangeable.\nSmart contract — a decentralized program that is stored in blockchain, and called when participants satisfy preconditions. It is similar to a vendor machine. It executes when the buyer inserted the card to pay. It allows you to choose the drink, and after a drink is released, transfers money to the seller. Automated, safe, and fast. A smart contract could be any service: money transfer, voting during elections, changing property owner, basically, anything that requires human in between.\nICO — Initial Coin Offering, similar to IPO (Initial Public Offering) — is an organization that allows you to raise the funds for products and services based on cryptocurrency.\nDApp — Decentralized application — are software applications that run inside a blockchain network. DApps run on a decentralized environment, is public and open-source, doesn’t have a single authority.\nDeFi — decentralized finance service resided in blockchain, which substitutes all the services that banks can provide.\nDAO — Decentralized Autonomous Organization — is an open-source platform running on a blockchain network that allows users, collectively manage the code. The rules are built in the code and enforced through smart contracts. In order to vote for proposals, users have to own and lock cryptocurrency into a voting contract. The voting weight is proportional to the amount of cryptocurrency locked. The proposal is finalized after achieving the network consensus rule and voters are rewarded with cryptocurrency.\nConsensus — a set of rules in a blockchain system that has to be verified in order to achieve the agreement on a single data value or a single state of the network.\nEthereum — an open-source software platform that works in the public blockchain networks and focuses on running DApps applications. It also has its own cryptocurrency for making payments inside the network, called Ether.\nEVM — Ethereum Virtual Machine — runtime environment for executing smart contracts in Ethereum blockchain. Allows a secure way of running programs that spread between machines around the world.\nSolidity — a programming language for writing smart contracts in blockchain, such as Ethereum. The program has to be compiled in Ethereum Virtual Machine.\nSolana — a blockchain that solves the major problems of scalability, transaction speed, and price, energy efficiency. It is open-source that encourages to develop the DApps.\nConclusion\nI hope you feel more confident with Web 3.0 terms and learned something new today. You can always go ahead and dive deep into each topic.\nFollow me on Medium if you learned anything new 🙌\nLet’s collect 1000 claps 👏 if you want a tutorial how to build Web 3.0 app. This list is will continue to grow, so don’t forget to bookmark it.\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\n\nLearn More\n\n🔥 Top 3 Web 3.0 Architecture Layers Explained: Frontend, Backend, and Data\nWhat do you need to Know about New Era of Internet Web 3.0 as a Frontend Developer\n🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend\n🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon & LinkedIn\n\n🔥 Top 18 Web 3.0 Trends Every Frontend Developer Has to Follow in 2022 was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/2861f9b63627",
    "categories": [
      "front-end-development",
      "web-development",
      "javascript",
      "programming",
      "cryptocurrency"
    ],
    "isoDate": "2022-01-11T05:51:42.000Z"
  },
  {
    "creator": "Vitalii Shevchuk",
    "title": " Build a Beautiful TikTok Clone with Angular and Micro Frontend",
    "link": "https://itnext.io/building-beautiful-tiktok-clone-with-angular-and-micro-frontend-part-2-5cb69d5f599e?source=rss-e3c7b0002690------2",
    "pubDate": "Tue, 04 Jan 2022 20:50:28 GMT",
    "content:encoded": "<h3>🔥 Part 2: Build a Beautiful TikTok Clone with Angular and Micro Frontend</h3><h4>We are finishing building a beautiful micro frontend TikTok clone by applying design and business logic</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*k87SfPuZJNnyA_796sbqAQ.png\" /></figure><h3><strong>Content</strong></h3><ul><li><a href=\"#5705\"><strong>Part 1</strong></a></li><li><a href=\"#e24c\"><strong>Intro</strong></a></li><li><a href=\"#8953\"><strong>Logo</strong></a></li><li><a href=\"#9861\"><strong>Colors</strong></a></li><li><a href=\"#6728\"><strong>Shadows</strong></a></li><li><a href=\"#f8a9\"><strong>Fonts and Icons</strong></a></li><li><a href=\"#92fe\"><strong>Implement Header in shell app</strong></a></li><li><a href=\"#d55e\"><strong>Finishing of Feed feature in a feed app</strong></a></li><li><a href=\"#e555\"><strong>Checking the results</strong></a></li><li><a href=\"#918c\"><strong>Conclusion</strong></a></li><li><a href=\"#cd8a\"><strong>Github Link</strong></a></li><li><a href=\"#3de2\"><strong>You are Awesome ❤️</strong></a></li><li><a href=\"#c9e6\"><strong>Learn More</strong></a></li></ul><h3>Part 1</h3><p><a href=\"https://medium.com/@easy-web/building-beautiful-tiktok-clone-with-angular-and-micro-frontend-part-1-bdd189425695\">🔥 Building Beautiful TikTok clone with Angular and Micro Frontend —   PART 1</a></p><h3><strong>Intro</strong></h3><p>In the second part, we will focus on wrapping up the design and the main logic. We have already built the main skeleton, the rest is just to iterate over it. We are good to go.</p><h3>Logo</h3><p>Every design starts with a <strong>logo</strong>. You may find plenty of free online services that will generate a logo for you. I will choose the first good-looking one, the logic is: if the website looks good itself, then it has to generate a beautiful logo 🤔, let’s try <a href=\"https://looka.com/\">https://looka.com/</a>. And this what I have achieved after a few clicks:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*d7JP3QCgoMyPTXtncLjRbw.png\" /></figure><p>Good enough, here I just <strong>inspect an element</strong> and <strong>copy</strong> <strong>SVG</strong>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Wn4IviSxYx2zwA2_3jI2rA.png\" /></figure><h3>Colors</h3><p>You have already seen added <strong>colors</strong> variables, in sharable <strong>library</strong> <strong>UI styles. </strong>I have secretly borrowed the gradient and colors from <a href=\"https://cssgradient.io/gradient-backgrounds/\">https://cssgradient.io/gradient-backgrounds/</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QKJFQXy8WU3inrvQJ8HMrw.png\" /></figure><p>Additional colors could be always found using the <strong>material design color picking tool</strong> <a href=\"https://material.io/design/color/the-color-system.html#tools-for-picking-colors\">https://material.io/design/color/the-color-system.html#tools-for-picking-colors</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*g6GdEVmZd0I6YMpEfoAv1w.png\" /></figure><h3>Shadows</h3><p>The <strong>shadow</strong> is one of the main elements of beautiful design. You don’t have to implement it yourself of course. There are good websites for this, like <a href=\"https://getcssscan.com/css-box-shadow-examples\">https://getcssscan.com/css-box-shadow-examples</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*V82Y755lklR55C4JsijQag.png\" /></figure><h3>Fonts and Icons</h3><p>Don’t forget about typography and icons. You can always choose the nice free font from the Google fonts website <a href=\"https://fonts.google.com/\">https://fonts.google.com/</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*I6XCu95yhVRZ0Sft8heBbw.png\" /></figure><p>We are also going to use the default material design icons pack <a href=\"https://fonts.google.com/icons?selected=Material+Icons\">https://fonts.google.com/icons?selected=Material+Icons</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2cggNzlPuAWnVGvouugZSQ.png\" /></figure><p>And integration libs/shared/ui/src/lib/styles/_styles.scss</p><pre>@import url(https://fonts.googleapis.com/css?family=Poppins);<br>@import url(https://fonts.googleapis.com/css?family=Material+Icons);</pre><h3>Implement Header in shell app</h3><p>Everything is ready to wrap up a design, let’s start with adding the Header. Go to apps/shell/src/app :</p><pre><strong>nx g @nrwl/angular:component components/Header</strong></pre><p>And apply the following code:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/33ce60f9e7a7564eaff4f58f21782823/href\">https://medium.com/media/33ce60f9e7a7564eaff4f58f21782823/href</a></iframe><p>Don’t forget to update the <strong>shell app</strong> in apps/shell/src/app</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e60d922572dde5333f824a3d45d603e5/href\">https://medium.com/media/e60d922572dde5333f824a3d45d603e5/href</a></iframe><h3>Finishing of Feed feature in a feed app</h3><p>We will split the<strong> feed micro app</strong> into two parts, <strong>slider</strong> — responsible for moving video post from previous to next. And <strong>card</strong> — the UI for video post. In apps/feed/src/app/remote-entry :</p><pre><strong>nx g @nrwl/angular:component components/slider/Slider<br>nx g @nrwl/angular:component components/card/Card</strong></pre><ul><li><strong>Card:</strong></li></ul><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9aabb58ca3f1e4b43c795e293c6425c0/href\">https://medium.com/media/9aabb58ca3f1e4b43c795e293c6425c0/href</a></iframe><ul><li><strong>Slider:</strong></li></ul><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b3af86f9c7af76f6acfd0acab0175c7a/href\">https://medium.com/media/b3af86f9c7af76f6acfd0acab0175c7a/href</a></iframe><ul><li><strong>Entry Component:</strong></li></ul><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ec7731e08ecdc3b0843b91a17dffb223/href\">https://medium.com/media/ec7731e08ecdc3b0843b91a17dffb223/href</a></iframe><h3>Checking the results</h3><p>Make sure you have updated tasks commands in app/package.json:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/29d8bc8c3972b42a6ffb26c5fbf2fa70/href\">https://medium.com/media/29d8bc8c3972b42a6ffb26c5fbf2fa70/href</a></iframe><p>Then simply run:</p><pre>npm run start</pre><p>And you will see the UI:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Zq7Yp99Q8wc-9cCUsEmrdA.png\" /></figure><p>The <strong>shell</strong> is running on http://localhost:3000 and <strong>feed</strong> in http://localhost:5000 if you open port 5000 it will look like this, only the slider component:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*R_uPyM5nYQdf27BXmCDZkA.png\" /></figure><h3>Conclusion</h3><p>With such a Google Driven Development approach, everyone is able to build modern web applications in minutes. Modern building tools I quite powerful nowadays, and provide development experience with no stress. I hope you are able to build a Micro frontend app easily now and had a great time going through the tutorial. If you were lazy, just check out the <strong>GitHub</strong> project below. If you have learned something new today, <strong>follow me and subscribe in the medium. If we collect 2000 👏, we will implement Like 👍 and Comments </strong>💬 <strong>features.</strong></p><ul><li><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://medium.com/@easy-web/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li></ul><h3>Github Link</h3><p><a href=\"https://github.com/Vitashev/ng-tiktok-mf-app\">GitHub - Vitashev/ng-tiktok-mf-app</a></p><h3>You are Awesome ❤️</h3><p>Can not stay calm when receiving so much support and love from you. Thank you for participating in building the blog, love, peace and stay safe.</p><p><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></p><p><a href=\"https://medium.com/u/8bfd0c494f20\">Alex Caraivan</a>, <a href=\"https://medium.com/u/8cde646d5e13\">Tarun Jain</a>, <a href=\"https://medium.com/u/8d9600ee7720\">Sanchi Bansal</a>, <a href=\"https://medium.com/u/8de20d9c5eaa\">Siva Kumar</a>, <a href=\"https://medium.com/u/8e312d780e55\">Jac</a>, <a href=\"https://medium.com/u/8e9576d1098d\">Miguel Maldonado</a>, <a href=\"https://medium.com/u/9123d0eec3f9\">deepak katara</a>, <a href=\"https://medium.com/u/9179418a26e9\">Quang Khải Trương</a>, <a href=\"https://medium.com/u/92e567ca66f8\">Hamienos Rocha</a>, <a href=\"https://medium.com/u/947c9611fccf\">adrianzardent</a>, <a href=\"https://medium.com/u/9808ea26e0f8\">Veli Cengiz</a>, <a href=\"https://medium.com/u/98d38d3565f4\">Amit Gupta</a>, <a href=\"https://medium.com/u/9b3e1fd66963\">Martin Krause</a>, <a href=\"https://medium.com/u/9be4210a069\">Bi Sh AR</a>, <a href=\"https://medium.com/u/9c9c2131a518\">Vlad Feroiu</a>, <a href=\"https://medium.com/u/9f15e264c2a\">Seraph</a>, <a href=\"https://medium.com/u/9f49bb3a741c\">Natalia Kiselev</a>, <a href=\"https://medium.com/u/9f8538fb5857\">Bhaskar Gyan Vardhan</a>, <a href=\"https://medium.com/u/a04cf248f52\">Ilya Kochankov</a>, <a href=\"https://medium.com/u/a217470ecb24\">Kenzo Christian</a>, <a href=\"https://medium.com/u/a34204d63450\">Rajveer</a>, <a href=\"https://medium.com/u/a5191bd60eb4\">Avinash Dv</a>, <a href=\"https://medium.com/u/a886e8003a2d\">Rajasekhar</a>, <a href=\"https://medium.com/u/a887575e0e3\">Hasan Jafarov</a>, <a href=\"https://medium.com/u/ad8c2ab8b074\">Arda Mutlu</a>, <a href=\"https://medium.com/u/ae428654eb40\">Yetunde Morenikeji</a>, <a href=\"https://medium.com/u/ae546d5917ee\">Sailesh Sathish</a>, <a href=\"https://medium.com/u/af4fbc703b9c\">srinivasa reddy challa</a>, <a href=\"https://medium.com/u/b08d36cd919d\">Viral Shah</a>, <a href=\"https://medium.com/u/b256afcb657\">Askar Talantbek uulu</a>, <a href=\"https://medium.com/u/b27d79c9a4d4\">Billal Farabi</a>, <a href=\"https://medium.com/u/b390dd9beb43\">Mrigank Satapathy</a>, <a href=\"https://medium.com/u/b4df5803948\">Agrit Tiwari</a>, <a href=\"https://medium.com/u/b4ecd80b3cfa\">Saraschandra Reddy</a>, <a href=\"https://medium.com/u/b69cd164b304\">Shilmantech</a>, <a href=\"https://medium.com/u/ba0413518628\">Ben Mamia</a>, <a href=\"https://medium.com/u/bd675372889c\">Hoangduy</a>, <a href=\"https://medium.com/u/c137056089df\">Akif</a>, <a href=\"https://medium.com/u/c30879e08966\">Teja</a>, <a href=\"https://medium.com/u/c39cee4ff151\">Anuranjan Srivastav</a>, <a href=\"https://medium.com/u/c3a0debf2c72\">Paulo Hericles</a>, <a href=\"https://medium.com/u/c4c5829e0be3\">Albert Ciepliński</a>, <a href=\"https://medium.com/u/c6b47ce2eb20\">Andriy Lozynskiy</a>, <a href=\"https://medium.com/u/c6ddf75bc9ea\">Ishan Fernando</a>, <a href=\"https://medium.com/u/c8075a34ff61\">Andriy Shtanheiev</a>, <a href=\"https://medium.com/u/cb0e581d543a\">brud</a>, <a href=\"https://medium.com/u/cbc452c29612\">Akshay Yelpale</a>, <a href=\"https://medium.com/u/cc98e4da253f\">kais mellah</a>, <a href=\"https://medium.com/u/cd181dee4a4c\">Shubham</a>, <a href=\"https://medium.com/u/d0fec3333af5\">Bart Knuiman</a>, <a href=\"https://medium.com/u/d587b70ca74\">M Viswanathan</a>, <a href=\"https://medium.com/u/d7e621887aa0\">Rajwant Prajapati</a>, <a href=\"https://medium.com/u/d85ea3f6e501\">Mandeepsingh Wis</a>, <a href=\"https://medium.com/u/d885df00e351\">Hernán Chamorro</a>, <a href=\"https://medium.com/u/da5f5557927c\">Vishal Chhatwani</a>, <a href=\"https://medium.com/u/dadfa5967eca\">Vinayak Bhomkar</a>, <a href=\"https://medium.com/u/dba9ba0bb039\">Faisal Ahammad</a>, <a href=\"https://medium.com/u/de23b3e8742f\">Benni Russell</a>, <a href=\"https://medium.com/u/de418050f38b\">Dhia Rahali</a>, <a href=\"https://medium.com/u/def58ce28b7d\">Helmut Steeman</a>, <a href=\"https://medium.com/u/df280b45eb77\">Gavin Macken</a>, <a href=\"https://medium.com/u/df8e82e911f5\">Onymous Dev</a>, <a href=\"https://medium.com/u/dfa54b886578\">Byungin Kim</a>, <a href=\"https://medium.com/u/dfbff8af836\">Mmonter</a>, <a href=\"https://medium.com/u/e04024adcd0\">Nabeelfaheem</a>, <a href=\"https://medium.com/u/e2c4b1e0fcc5\">Suresh KUMAR Mukhiya</a>, <a href=\"https://medium.com/u/e4d5944e89b0\">MyWildOak</a>, <a href=\"https://medium.com/u/e9963bc9a3f\">Lutfor Rahman Hira</a>, <a href=\"https://medium.com/u/ea5df49ad44a\">Andrew Bargan</a>, <a href=\"https://medium.com/u/ebd39a9d9cc2\">ayush palak</a>, <a href=\"https://medium.com/u/edab2a73552\">Mark Schmeets</a>, <a href=\"https://medium.com/u/eff774500df0\">Peter Klinch</a>, <a href=\"https://medium.com/u/f32c69e8bdf3\">Alan Yu</a>, <a href=\"https://medium.com/u/f61a6ea7b967\">Steve Todorov</a>, <a href=\"https://medium.com/u/f7871decd768\">Said Griouri</a>, <a href=\"https://medium.com/u/fafc8d8ee8cb\">Astron Igor</a>, <a href=\"https://medium.com/u/fd6420130e31\">Mohammad Ali Roudkhanehie</a>, <a href=\"https://medium.com/u/ff568ade8571\">Karthik A</a>.</p><h3>Learn More</h3><ul><li><a href=\"https://itnext.io/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon &amp; LinkedIn</a></li><li><a href=\"https://itnext.io/how-micro-frontend-changes-the-future-of-angular-bb4deb2cfdad\">🔥 How Micro Frontend changes the Future of Angular?</a></li><li><a href=\"https://itnext.io/building-angular-micro-frontend-with-ngrx-state-sharing-and-nx-cli-7e9af10ebd03\">🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5cb69d5f599e\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://itnext.io/building-beautiful-tiktok-clone-with-angular-and-micro-frontend-part-2-5cb69d5f599e\">🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend</a> was originally published in <a href=\"https://itnext.io\">ITNEXT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "🔥 Part 2: Build a Beautiful TikTok Clone with Angular and Micro Frontend\nWe are finishing building a beautiful micro frontend TikTok clone by applying design and business logic\n\nContent\n\nPart 1\nIntro\nLogo\nColors\nShadows\nFonts and Icons\nImplement Header in shell app\nFinishing of Feed feature in a feed app\nChecking the results\nConclusion\nGithub Link\nYou are Awesome ❤️\nLearn More\n\nPart 1\n🔥 Building Beautiful TikTok clone with Angular and Micro Frontend —   PART 1\nIntro\nIn the second part, we will focus on wrapping up the design and the main logic. We have already built the main skeleton, the rest is just to iterate over it. We are good to go.\nLogo\nEvery design starts with a logo. You may find plenty of free online services that will generate a logo for you. I will choose the first good-looking one, the logic is: if the website looks good itself, then it has to generate a beautiful logo 🤔, let’s try https://looka.com/. And this what I have achieved after a few clicks:\n\nGood enough, here I just inspect an element and copy SVG.\n\nColors\nYou have already seen added colors variables, in sharable library UI styles. I have secretly borrowed the gradient and colors from https://cssgradient.io/gradient-backgrounds/.\n\nAdditional colors could be always found using the material design color picking tool https://material.io/design/color/the-color-system.html#tools-for-picking-colors\n\nShadows\nThe shadow is one of the main elements of beautiful design. You don’t have to implement it yourself of course. There are good websites for this, like https://getcssscan.com/css-box-shadow-examples\n\nFonts and Icons\nDon’t forget about typography and icons. You can always choose the nice free font from the Google fonts website https://fonts.google.com/.\n\nWe are also going to use the default material design icons pack https://fonts.google.com/icons?selected=Material+Icons\n\nAnd integration libs/shared/ui/src/lib/styles/_styles.scss\n@import url(https://fonts.googleapis.com/css?family=Poppins);\n@import url(https://fonts.googleapis.com/css?family=Material+Icons);\nImplement Header in shell app\nEverything is ready to wrap up a design, let’s start with adding the Header. Go to apps/shell/src/app :\nnx g @nrwl/angular:component components/Header\nAnd apply the following code:\nhttps://medium.com/media/33ce60f9e7a7564eaff4f58f21782823/href\nDon’t forget to update the shell app in apps/shell/src/app\nhttps://medium.com/media/e60d922572dde5333f824a3d45d603e5/href\nFinishing of Feed feature in a feed app\nWe will split the feed micro app into two parts, slider — responsible for moving video post from previous to next. And card — the UI for video post. In apps/feed/src/app/remote-entry :\nnx g @nrwl/angular:component components/slider/Slider\nnx g @nrwl/angular:component components/card/Card\n\nCard:\nhttps://medium.com/media/9aabb58ca3f1e4b43c795e293c6425c0/href\nSlider:\nhttps://medium.com/media/b3af86f9c7af76f6acfd0acab0175c7a/href\nEntry Component:\nhttps://medium.com/media/ec7731e08ecdc3b0843b91a17dffb223/href\nChecking the results\nMake sure you have updated tasks commands in app/package.json:\nhttps://medium.com/media/29d8bc8c3972b42a6ffb26c5fbf2fa70/href\nThen simply run:\nnpm run start\nAnd you will see the UI:\n\nThe shell is running on http://localhost:3000 and feed in http://localhost:5000 if you open port 5000 it will look like this, only the slider component:\n\nConclusion\nWith such a Google Driven Development approach, everyone is able to build modern web applications in minutes. Modern building tools I quite powerful nowadays, and provide development experience with no stress. I hope you are able to build a Micro frontend app easily now and had a great time going through the tutorial. If you were lazy, just check out the GitHub project below. If you have learned something new today, follow me and subscribe in the medium. If we collect 2000 👏, we will implement Like 👍 and Comments 💬 features.\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\n\nGithub Link\nGitHub - Vitashev/ng-tiktok-mf-app\nYou are Awesome ❤️\nCan not stay calm when receiving so much support and love from you. Thank you for participating in building the blog, love, peace and stay safe.\nGet an email whenever Vitalii Shevchuk publishes.\nAlex Caraivan, Tarun Jain, Sanchi Bansal, Siva Kumar, Jac, Miguel Maldonado, deepak katara, Quang Khải Trương, Hamienos Rocha, adrianzardent, Veli Cengiz, Amit Gupta, Martin Krause, Bi Sh AR, Vlad Feroiu, Seraph, Natalia Kiselev, Bhaskar Gyan Vardhan, Ilya Kochankov, Kenzo Christian, Rajveer, Avinash Dv, Rajasekhar, Hasan Jafarov, Arda Mutlu, Yetunde Morenikeji, Sailesh Sathish, srinivasa reddy challa, Viral Shah, Askar Talantbek uulu, Billal Farabi, Mrigank Satapathy, Agrit Tiwari, Saraschandra Reddy, Shilmantech, Ben Mamia, Hoangduy, Akif, Teja, Anuranjan Srivastav, Paulo Hericles, Albert Ciepliński, Andriy Lozynskiy, Ishan Fernando, Andriy Shtanheiev, brud, Akshay Yelpale, kais mellah, Shubham, Bart Knuiman, M Viswanathan, Rajwant Prajapati, Mandeepsingh Wis, Hernán Chamorro, Vishal Chhatwani, Vinayak Bhomkar, Faisal Ahammad, Benni Russell, Dhia Rahali, Helmut Steeman, Gavin Macken, Onymous Dev, Byungin Kim, Mmonter, Nabeelfaheem, Suresh KUMAR Mukhiya, MyWildOak, Lutfor Rahman Hira, Andrew Bargan, ayush palak, Mark Schmeets, Peter Klinch, Alan Yu, Steve Todorov, Said Griouri, Astron Igor, Mohammad Ali Roudkhanehie, Karthik A.\nLearn More\n\n🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon & LinkedIn\n🔥 How Micro Frontend changes the Future of Angular?\n🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli\n\n🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/5cb69d5f599e",
    "categories": [
      "programming",
      "web-development",
      "angular",
      "javascript",
      "tik-tok"
    ],
    "isoDate": "2022-01-04T20:50:28.000Z"
  },
  {
    "creator": "Vitalii Shevchuk",
    "title": " Build a Beautiful TikTok Clone with Angular and Micro Frontend",
    "link": "https://itnext.io/building-beautiful-tiktok-clone-with-angular-and-micro-frontend-part-1-bdd189425695?source=rss-e3c7b0002690------2",
    "pubDate": "Tue, 04 Jan 2022 20:50:22 GMT",
    "content:encoded": "<h3>🔥 Part 1: Build a Beautiful TikTok Clone with Angular and Micro Frontend</h3><h4>No ugly tutorials anymore, only beautiful, real-world examples, learn Micro Frontend by building TikTok</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_X1VDkPbGyF5nabpCfTHpg.png\" /></figure><h3>Content</h3><ul><li><a href=\"#82ba\"><strong>Intro</strong></a></li><li><a href=\"#dce5\"><strong>Proof of Concept</strong></a></li><li><a href=\"#e530\"><strong>Creating Micro Frontend skeleton 💀</strong></a></li><li><a href=\"#b036\"><strong>Setting up sharable libraries</strong></a></li><li><a href=\"#38cb\"><strong>Github Link</strong></a></li><li><a href=\"#31fd\"><strong>Conclusion</strong></a></li><li><a href=\"#9a3a\"><strong>Part 2</strong></a></li><li><a href=\"#98a7\"><strong>You are Awesome ❤️</strong></a></li><li><a href=\"#f8ae\"><strong>Learn More</strong></a></li></ul><h3>Intro</h3><p>You must be familiar with the <strong>micro frontend</strong> concept, and how to build a micro frontend app with <strong>Angular</strong>, if not, check this article first:</p><ul><li><a href=\"https://itnext.io/how-micro-frontend-changes-the-future-of-angular-bb4deb2cfdad\">🔥 How Micro Frontend changes the Future of Angular?</a></li><li><a href=\"https://itnext.io/building-angular-micro-frontend-with-ngrx-state-sharing-and-nx-cli-7e9af10ebd03\">🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli</a></li></ul><p>Today we are going to raise the bar and implement something more cool and fun. How about we build a beautiful <strong>TikTok</strong> clone 🤔, yes you read it right, let’s get our own portion of hype. You may think that it is too much and you don’t want to spend too much time on it. But I promise, we going to build it in the most efficient and lazy way, with minimum coding, and will learn a lot about modern frontend development. Let’s jump straight into it. 🏃</p><h3>Proof of Concept</h3><p>The idea is inspired by the official <strong>TikTok</strong> web version, it looks like this.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fmIfEbQOs9knl0PVEv0y0g.png\" /></figure><p>Our app will take over a similar concept. It will show different <strong>TikTok</strong> posts together with the number of <em>likes </em>👍 and <em>comments </em>💬. The user can navigate between posts using <em>prev</em> and <em>next</em> arrows. The end product will look like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/672/1*Zh8sW8RungWj2XW0kx4PRA.gif\" /></figure><p>Our requirements are following:</p><ul><li>Most look beautiful 👸;</li><li>Must be simple and implemented with minimum efforts;</li><li>Must navigate between the posts using Next and Prev buttons;</li><li>Must be built with <strong>Angular</strong>;</li><li>Must be <strong>Micro frontend</strong>, where the <strong><em>shell</em></strong> is app container and <strong>feed</strong> — is a <strong><em>micro app</em>, </strong>each is hosted separately;</li><li>Must use real API (we will use <strong>Reddit</strong>);</li></ul><p>All is set, let’s get started 🏃‍♀!</p><h3>Creating Micro Frontend skeleton 💀</h3><p>First, make sure <strong>NX</strong> is installed and ready:</p><pre><strong>npm i -g nx</strong></pre><p>Then create a workspace of our app, choose everything by default <em>Enter-Enter-Enter</em>.</p><pre><strong>npx create-nx-workspace ng-tiktok-mf-app</strong></pre><p>Next install <strong>Angular:</strong></p><pre><strong>cd</strong> <strong>ng-tiktok-mf-app</strong>/ <br><strong>npm install --save-dev @nrwl/angular</strong></pre><p>Finally, we need to generate <strong>shell</strong> (our main container app) and <strong>feed micro app</strong> (choose <strong>SCSS</strong> as a target-style framework);</p><pre><strong>npx nx g @nrwl/angular:app shell --mfe --mfeType=host --port=3000 --routing=true</strong></pre><p>And <strong>feed</strong>:</p><pre><strong>npx nx g @nrwl/angular:app feed --mfe --mfeType=remote --port=5000 --host=shell --routing=true</strong></pre><p>When you serve the app:</p><pre><strong>nx run shell:serve-mfe</strong></pre><p>It will run a <strong>shell</strong> in port <strong>3000</strong> and <strong>feed</strong> in port <strong>5000</strong>.</p><h3>Setting up sharable libraries</h3><p>The first step is to generate a sharable datastore library that will handle our API call and state.</p><pre><strong>nx g @nrwl/angular:lib shared/data-store</strong></pre><p>Next, let’s create an API service that will make a call to the <a href=\"https://www.reddit.com/r/TikTokCringe/\"><strong>Reddit TikTokCringe</strong></a> group. In <strong>libs/shared/data-store/src/lib</strong></p><pre><strong>nx g @nrwl/angular:module feed-store/FeedStore<br>nx g @nrwl/angular:service feed-store/FeedStore<br>nx g @nrwl/angular:service feed-store/api/FeedApi</strong></pre><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9a25dde4fa795e27498cb4b45a34c030/href\">https://medium.com/media/9a25dde4fa795e27498cb4b45a34c030/href</a></iframe><p>Brilliant, don’t forget to export library in <strong>libs/shared/data-store/src/index.ts</strong></p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/27ec7af4b9000ec5d9e2beaed776682c/href\">https://medium.com/media/27ec7af4b9000ec5d9e2beaed776682c/href</a></iframe><p>We will also share some styles between <strong>shell</strong> and <strong>feed</strong>, go ahead and generate the UI library.</p><pre><strong>nx g @nrwl/angular:lib shared/ui</strong></pre><p>In <strong>libs/shared/ui/src/lib</strong></p><pre>mkdir styles<br>cd styles<br>touch _styles.scss<br>touch _index.scss</pre><p>In _styles.scss we will <a href=\"https://meyerweb.com/eric/tools/css/reset/\"><strong>reset default browser styles</strong></a> and apply our own global styles.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/30275503e61c7f7204f0f0dde4e545b8/href\">https://medium.com/media/30275503e61c7f7204f0f0dde4e545b8/href</a></iframe><p>In order to expose shared libraries make sure the correct paths are exported in tsconfig.base.json</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e66e45fe602642072608f72387bed960/href\">https://medium.com/media/e66e45fe602642072608f72387bed960/href</a></iframe><p>Add the aliases in <strong>apps/feed/webpack.config.js </strong>and<strong> </strong><strong>apps/shell/webpack.config.js</strong>:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c764482470cb4ae337a9990e36291150/href\">https://medium.com/media/c764482470cb4ae337a9990e36291150/href</a></iframe><p>And import the styles into <strong>apps/shell/src/styles.scss</strong> and <strong>app/apps/feed/src/styles.scss</strong></p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0134854639d41242d99ee082343cbb8e/href\">https://medium.com/media/0134854639d41242d99ee082343cbb8e/href</a></iframe><h3>Conclusion</h3><p>Hope you have enjoyed Part 1, we are halfway done. In Part 2 we will have more fun and will implement both design and business logic, and as promised, with minimum effort 😉. <strong>If you learned something new, follow me and subscribe in the medium</strong>.</p><ul><li><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://medium.com/@easy-web/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li></ul><h3>Part 2</h3><p><a href=\"https://medium.com/@easy-web/building-beautiful-tiktok-clone-with-angular-and-micro-frontend-part-2-5cb69d5f599e\">🔥 Building Beautiful TikTok clone with Angular and Micro Frontend —   PART 2</a></p><h3>Github Link</h3><p><a href=\"https://github.com/Vitashev/ng-tiktok-mf-app\">GitHub - Vitashev/ng-tiktok-mf-app</a></p><h3>You are Awesome ❤️</h3><p>Happy holidays, Merry Christmas, and Happy New Year! Wish you all your year&#39;s resolution comes true, state safe, and stay tuned, more insightful content is coming. Subscribe to my blog, and you are going to get more exciting posts with good vibes:</p><p><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></p><p>Huge respect to your contribution ❤️</p><p><a href=\"https://medium.com/u/1371230a5ea0\">Zackkhan</a>, <a href=\"https://medium.com/u/158cd5ec40c1\">PA-TH</a>, <a href=\"https://medium.com/u/161a76c4a7b1\">Isaac Sneddon-Jenkins</a>, <a href=\"https://medium.com/u/1b0d76c1a030\">Omid Heidari</a>, <a href=\"https://medium.com/u/1b94d57031c\">Alessandro Lausdei</a>, <a href=\"https://medium.com/u/1f803a8606ec\">Golam Kibria</a>, <a href=\"https://medium.com/u/21d66616fecd\">sudhir meena</a>, <a href=\"https://medium.com/u/2254e587c8bf\">吳昊諶</a>, <a href=\"https://medium.com/u/2302688bedd6\">Thao Phung</a>, <a href=\"https://medium.com/u/2341eb4242e1\">Valerii Grygoriev</a>, <a href=\"https://medium.com/u/2468c4b7d7dd\">Natalia Kosareva</a>, <a href=\"https://medium.com/u/26b2e15abf09\">Sivaprasad EV</a>, <a href=\"https://medium.com/u/32b4491f234b\">Sujay Das</a>, <a href=\"https://medium.com/u/3482f1f25557\">Igor Toghunts</a>, <a href=\"https://medium.com/u/392ecc9046fc\">Gülcan Baran</a>, <a href=\"https://medium.com/u/3b5466022b70\">Yusuf BAHADIR</a>, <a href=\"https://medium.com/u/3c1e88191298\">David Pawlus</a>, <a href=\"https://medium.com/u/3c6d8f4228ad\">SAINATH</a>, <a href=\"https://medium.com/u/3ca4666c58ef\">Omair Siddiqui</a>, <a href=\"https://medium.com/u/3d7a92e11aa\">Saurabh Siddhu</a>, <a href=\"https://medium.com/u/3fa7320b80af\">Rohit Yadav</a>, <a href=\"https://medium.com/u/40557fc8d2c7\">Brian Cantrell</a>, <a href=\"https://medium.com/u/41590bfd319f\">Aditya Dev S</a>, <a href=\"https://medium.com/u/4302d177f565\">Jordi Bassaganas</a>, <a href=\"https://medium.com/u/446b443533cb\">Red Robin</a>, <a href=\"https://medium.com/u/490c40d65f4a\">Hemjynem</a>, <a href=\"https://medium.com/u/49c771864b85\">Sameer Mohiuddin</a>, <a href=\"https://medium.com/u/4b0ccf26ab7e\">Heechang Yang</a>, <a href=\"https://medium.com/u/4c8b93f7412\">Mark Savol</a>, <a href=\"https://medium.com/u/4d13f3a0c2fc\">Ci Gimenez</a>, <a href=\"https://medium.com/u/502299c3651a\">Ras Suleimanov</a>, <a href=\"https://medium.com/u/508c414a4e09\">Swapnil Bawkar</a>, <a href=\"https://medium.com/u/50dd09c3cd3b\">Bponder</a>, <a href=\"https://medium.com/u/56b59c84495b\">Gülay YALLI</a>, <a href=\"https://medium.com/u/590ee2ea7688\">Tushar Khanna</a>, <a href=\"https://medium.com/u/5a3d7678f016\">Kirk Clarke</a>, <a href=\"https://medium.com/u/5a49f9536524\">Simone Sinagra</a>, <a href=\"https://medium.com/u/5b12f207667e\">Esh</a>, <a href=\"https://medium.com/u/5be1266d5a93\">Ashwin Kumar</a>, <a href=\"https://medium.com/u/5d17c3c295de\">Paul Nike</a>, <a href=\"https://medium.com/u/5ddb4737e916\">Chetankirange</a>, <a href=\"https://medium.com/u/5eef3f554072\">Adam Salfinger</a>, <a href=\"https://medium.com/u/5fddb6d71a9c\">Ngoc Vu</a>, <a href=\"https://medium.com/u/662c76b4c7c7\">Elias</a>, <a href=\"https://medium.com/u/66650478b1cb\">Dinesh</a>, <a href=\"https://medium.com/u/67cdb442a2b\">Swarnim Bhardwaj</a>, <a href=\"https://medium.com/u/680989974eb6\">Nurudeen Soremekun</a>, <a href=\"https://medium.com/u/6add3ab0612c\">Prateek Pandey</a>, <a href=\"https://medium.com/u/6b72893b6b83\">Özer Öztürk</a>, <a href=\"https://medium.com/u/6e26553ec15b\">Barik Jyoti</a>, <a href=\"https://medium.com/u/7204c74d7e46\">Deep Space</a>, <a href=\"https://medium.com/u/775bc5f37810\">Sudoofe</a>, <a href=\"https://medium.com/u/7814faea0a16\">Matt Prabu</a>, <a href=\"https://medium.com/u/7988ea1635b1\">Mark Reynolds</a>, <a href=\"https://medium.com/u/7b2e20dfd090\">Sofia Bento</a>, <a href=\"https://medium.com/u/7b51f5aa6d4a\">Denis</a>, <a href=\"https://medium.com/u/7b8ece3b271b\">Thomas</a>, <a href=\"https://medium.com/u/7bf29a2e8f1c\">Fernando Huerta</a>, <a href=\"https://medium.com/u/7f89de208df5\">Lương Như Toàn</a>, <a href=\"https://medium.com/u/82b6525edd95\">Tanmay Jauhari</a>, <a href=\"https://medium.com/u/84bf52744d89\">Chris Anderson</a>, <a href=\"https://medium.com/u/8979153743f9\">amey pai</a>, <a href=\"https://medium.com/u/8a060b88e1d4\">Mhhasan</a>, <a href=\"https://medium.com/u/8b0dc517d79f\">Rajat Explains</a>,</p><h3>Learn More</h3><ul><li><a href=\"https://itnext.io/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon &amp; LinkedIn</a></li><li><a href=\"https://itnext.io/how-micro-frontend-changes-the-future-of-angular-bb4deb2cfdad\">🔥 How Micro Frontend changes the Future of Angular?</a></li><li><a href=\"https://itnext.io/building-angular-micro-frontend-with-ngrx-state-sharing-and-nx-cli-7e9af10ebd03\">🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bdd189425695\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://itnext.io/building-beautiful-tiktok-clone-with-angular-and-micro-frontend-part-1-bdd189425695\">🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend</a> was originally published in <a href=\"https://itnext.io\">ITNEXT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "🔥 Part 1: Build a Beautiful TikTok Clone with Angular and Micro Frontend\nNo ugly tutorials anymore, only beautiful, real-world examples, learn Micro Frontend by building TikTok\n\nContent\n\nIntro\nProof of Concept\nCreating Micro Frontend skeleton 💀\nSetting up sharable libraries\nGithub Link\nConclusion\nPart 2\nYou are Awesome ❤️\nLearn More\n\nIntro\nYou must be familiar with the micro frontend concept, and how to build a micro frontend app with Angular, if not, check this article first:\n\n🔥 How Micro Frontend changes the Future of Angular?\n🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli\n\nToday we are going to raise the bar and implement something more cool and fun. How about we build a beautiful TikTok clone 🤔, yes you read it right, let’s get our own portion of hype. You may think that it is too much and you don’t want to spend too much time on it. But I promise, we going to build it in the most efficient and lazy way, with minimum coding, and will learn a lot about modern frontend development. Let’s jump straight into it. 🏃\nProof of Concept\nThe idea is inspired by the official TikTok web version, it looks like this.\n\nOur app will take over a similar concept. It will show different TikTok posts together with the number of likes 👍 and comments 💬. The user can navigate between posts using prev and next arrows. The end product will look like this:\n\nOur requirements are following:\n\nMost look beautiful 👸;\nMust be simple and implemented with minimum efforts;\nMust navigate between the posts using Next and Prev buttons;\nMust be built with Angular;\nMust be Micro frontend, where the shell is app container and feed — is a micro app, each is hosted separately;\nMust use real API (we will use Reddit);\n\nAll is set, let’s get started 🏃‍♀!\nCreating Micro Frontend skeleton 💀\nFirst, make sure NX is installed and ready:\nnpm i -g nx\nThen create a workspace of our app, choose everything by default Enter-Enter-Enter.\nnpx create-nx-workspace ng-tiktok-mf-app\nNext install Angular:\ncd ng-tiktok-mf-app/ \nnpm install --save-dev @nrwl/angular\nFinally, we need to generate shell (our main container app) and feed micro app (choose SCSS as a target-style framework);\nnpx nx g @nrwl/angular:app shell --mfe --mfeType=host --port=3000 --routing=true\nAnd feed:\nnpx nx g @nrwl/angular:app feed --mfe --mfeType=remote --port=5000 --host=shell --routing=true\nWhen you serve the app:\nnx run shell:serve-mfe\nIt will run a shell in port 3000 and feed in port 5000.\nSetting up sharable libraries\nThe first step is to generate a sharable datastore library that will handle our API call and state.\nnx g @nrwl/angular:lib shared/data-store\nNext, let’s create an API service that will make a call to the Reddit TikTokCringe group. In libs/shared/data-store/src/lib\nnx g @nrwl/angular:module feed-store/FeedStore\nnx g @nrwl/angular:service feed-store/FeedStore\nnx g @nrwl/angular:service feed-store/api/FeedApi\nhttps://medium.com/media/9a25dde4fa795e27498cb4b45a34c030/href\nBrilliant, don’t forget to export library in libs/shared/data-store/src/index.ts\nhttps://medium.com/media/27ec7af4b9000ec5d9e2beaed776682c/href\nWe will also share some styles between shell and feed, go ahead and generate the UI library.\nnx g @nrwl/angular:lib shared/ui\nIn libs/shared/ui/src/lib\nmkdir styles\ncd styles\ntouch _styles.scss\ntouch _index.scss\nIn _styles.scss we will reset default browser styles and apply our own global styles.\nhttps://medium.com/media/30275503e61c7f7204f0f0dde4e545b8/href\nIn order to expose shared libraries make sure the correct paths are exported in tsconfig.base.json\nhttps://medium.com/media/e66e45fe602642072608f72387bed960/href\nAdd the aliases in apps/feed/webpack.config.js and apps/shell/webpack.config.js:\nhttps://medium.com/media/c764482470cb4ae337a9990e36291150/href\nAnd import the styles into apps/shell/src/styles.scss and app/apps/feed/src/styles.scss\nhttps://medium.com/media/0134854639d41242d99ee082343cbb8e/href\nConclusion\nHope you have enjoyed Part 1, we are halfway done. In Part 2 we will have more fun and will implement both design and business logic, and as promised, with minimum effort 😉. If you learned something new, follow me and subscribe in the medium.\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\n\nPart 2\n🔥 Building Beautiful TikTok clone with Angular and Micro Frontend —   PART 2\nGithub Link\nGitHub - Vitashev/ng-tiktok-mf-app\nYou are Awesome ❤️\nHappy holidays, Merry Christmas, and Happy New Year! Wish you all your year's resolution comes true, state safe, and stay tuned, more insightful content is coming. Subscribe to my blog, and you are going to get more exciting posts with good vibes:\nGet an email whenever Vitalii Shevchuk publishes.\nHuge respect to your contribution ❤️\nZackkhan, PA-TH, Isaac Sneddon-Jenkins, Omid Heidari, Alessandro Lausdei, Golam Kibria, sudhir meena, 吳昊諶, Thao Phung, Valerii Grygoriev, Natalia Kosareva, Sivaprasad EV, Sujay Das, Igor Toghunts, Gülcan Baran, Yusuf BAHADIR, David Pawlus, SAINATH, Omair Siddiqui, Saurabh Siddhu, Rohit Yadav, Brian Cantrell, Aditya Dev S, Jordi Bassaganas, Red Robin, Hemjynem, Sameer Mohiuddin, Heechang Yang, Mark Savol, Ci Gimenez, Ras Suleimanov, Swapnil Bawkar, Bponder, Gülay YALLI, Tushar Khanna, Kirk Clarke, Simone Sinagra, Esh, Ashwin Kumar, Paul Nike, Chetankirange, Adam Salfinger, Ngoc Vu, Elias, Dinesh, Swarnim Bhardwaj, Nurudeen Soremekun, Prateek Pandey, Özer Öztürk, Barik Jyoti, Deep Space, Sudoofe, Matt Prabu, Mark Reynolds, Sofia Bento, Denis, Thomas, Fernando Huerta, Lương Như Toàn, Tanmay Jauhari, Chris Anderson, amey pai, Mhhasan, Rajat Explains,\nLearn More\n\n🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon & LinkedIn\n🔥 How Micro Frontend changes the Future of Angular?\n🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli\n\n🔥 Build a Beautiful TikTok Clone with Angular and Micro Frontend was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/bdd189425695",
    "categories": [
      "javascript",
      "programming",
      "tik-tok",
      "web-development",
      "angular"
    ],
    "isoDate": "2022-01-04T20:50:22.000Z"
  },
  {
    "creator": "Vitalii Shevchuk",
    "title": " How to Share the Same Web Components between Angular and React? ",
    "link": "https://itnext.io/how-to-share-the-same-web-components-between-angular-and-react-9069d8cc9d62?source=rss-e3c7b0002690------2",
    "pubDate": "Fri, 17 Dec 2021 17:40:50 GMT",
    "content:encoded": "<p>Let’s find out if we can build sharable Web components compatible with any frameworks like Angular and React</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gRri9qYrljx_SqgEnTP9MA.png\" /></figure><h3>Content</h3><ul><li><a href=\"#c939\"><strong>Intro</strong></a></li><li><a href=\"#a63a\"><strong>Why reusable UI components are important?</strong></a></li><li><a href=\"#c16c\"><strong>What the heck is Web Components?</strong></a></li><li><a href=\"#604f\"><strong>Proof of Concept</strong></a></li><li><a href=\"#6379\"><strong>Prototyping the Angular, React apps, and UI library</strong></a></li><li><a href=\"#62a2\"><strong>Integration of UI component with React and Angular</strong></a></li><li><a href=\"#4bab\"><strong>GitHub link</strong></a></li><li><a href=\"#dddf\"><strong>Conclusion</strong></a></li><li><a href=\"#e5dc\"><strong>You are amazing, thank you ❤️</strong></a></li><li><a href=\"#89c5\"><strong>Learn More</strong></a></li></ul><h3>Intro</h3><p>There are plenty of UI libraries that provide you a pack of industry common components like buttons, dropdown, modal windows. One of the most popular examples can be material design or bootstrap. The problem with them is that they are not compatible with all the UI frameworks, so you need to integrate them in some way, or use a framework-specific version. Such a solution is not acceptable in most of the use cases, especially when the product is growing and consistency has higher priority than before.<strong><em> Let’s find out together, how to build the UI library, that can be reused in any UI framework?</em></strong></p><h3>Why reusable UI components are important?</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2F26hishnZ9EcHI6eiY%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F26hishnZ9EcHI6eiY%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2F26hishnZ9EcHI6eiY%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"241\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/362a6e7964793d2909f7ae285f77464a/href\">https://medium.com/media/362a6e7964793d2909f7ae285f77464a/href</a></iframe><p>Building unified, reusable UI components can be useful in many scenarios. With rapidly changing trends in the frontend world, like today React is more popular but tomorrow Angular, or a new framework released that is better than both of them in terms of performance and flexibility. Or a new major version of the framework is not compatible with the previous, and as a result, you can not reuse your old components, that is what happened with the transition from AngularJs to Angular 2+. All of these cases of technology changes affect the frontend quite frequently and create an issue of <strong><em>migrating</em></strong> UI components.</p><p>The other scenario is when you work on a large enterprise product that builds multiple projects. And these projects are reusing the same UI components. Moreover, the projects may use different UI frameworks. In this case, unified UI components will be very handy.</p><p>Also, another case happens when in some fast-growing projects, the team decides to open source some of the services or components. If you consider sharing with the world your UI library too, which may have a positive effect on your product and will pay you back with promoting your brand and attracting new customers, you need to think in direction of building a framework-agnostic Ui library.</p><p>And the last one, if you are a creator. And you may be the one who wants to work on the open-source project to create your own library. For any reason, like improve karma, create your portfolio for future employers or just enhance your frontend credibility.</p><h3>What the heck is Web Components?</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FgKsJUddjnpPG0%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FgKsJUddjnpPG0%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FgKsJUddjnpPG0%2F200.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"235\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ed4e12a474c5859ddc0d45b6b698897c/href\">https://medium.com/media/ed4e12a474c5859ddc0d45b6b698897c/href</a></iframe><p>Well, after screening through the different use cases that may get benefits from unified UI components, the question still remains,<strong><em> how to implement it? </em></strong>If we want such a flexible solution, also supported by major browsers, we have to look at the direction of <strong><em>Web Components</em></strong>. It is not a new word in the frontend, web components have a long history and first time were introduced at Fronteers Conference 2011 by Alex Russel. Later on, big tech companies like Google managed to build an open-source library Polymer, that simplified building applications based on <strong><em>Web Components</em></strong>. And finally, browsers, such a Firefox started to support <strong><em>Web Components</em></strong> by default, and until now, Web Components are compatible with all major browsers.</p><p>In this article we are not going to dive deep into the Web Components, we only show the base implementation and have they can be reused across different frameworks.</p><h3>Proof of concept</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2F9Jb0Yj0KMYGJWmEWOd%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F9Jb0Yj0KMYGJWmEWOd%2Fgiphy-downsized.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2F9Jb0Yj0KMYGJWmEWOd%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"244\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d9d12f2a80636a47f5a22475e1c43c7c/href\">https://medium.com/media/d9d12f2a80636a47f5a22475e1c43c7c/href</a></iframe><p>We are going to implement 2 simple apps, using React and Angular. The apps will consist of a button — “<strong>Increment</strong>” in Angular app and “<strong>Decrement</strong>” in React app, clicking on it will increment and decrement value accordingly. Both apps will share a ui-component called <strong>counter-value. </strong>What it does, is just simply retrieve the value from the parent and display it. The final result will look like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qdCvQtMoTRBKNHRZGJFQ_g.gif\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*W0a1V6-7EFKr2h1_obIzLA.gif\" /></figure><h3>Prototyping the Angular, React apps, and UI library</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2Fl0ErP9pPVnM34h0Ws%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2Fl0ErP9pPVnM34h0Ws%2Fgiphy-downsized.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2Fl0ErP9pPVnM34h0Ws%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"244\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/869ed939791e41888912ee93fe488f29/href\">https://medium.com/media/869ed939791e41888912ee93fe488f29/href</a></iframe><p>Let’s jump straight to the implementation. In this example, we will use <strong>nrwl</strong> cli to quickly prototype monorepo with two apps and one shared library.</p><p>First, let’s create a workplace and enter the folder:</p><pre>npx create-nx-workspace web-comp-app<br>cd web-comp-app/</pre><p>Next what we need, is to install all the dependencies:</p><pre>npm install — save-dev @nrwl/angular<br>npm install — save-dev @nrwl/react</pre><p>Then we need to generate a shared library and add our reusable ui-component to it.</p><pre>nx g @nrwl/web:lib shared/ui-components<br>cd libs/shared/ui-components/src/lib<br>mkdir wc-counter-value<br>cd wc-counter-value</pre><p>And create file wc-counter-value.element.ts</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/77ac291bc3b1b5f74915975589de49b5/href\">https://medium.com/media/77ac291bc3b1b5f74915975589de49b5/href</a></iframe><p>After element is ready, we need to export it from shared library:</p><pre>web-comp-app/libs/shared/ui-components/src/index.ts</pre><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/26d665fd6d29fcc8b693dab8e288dd2d/href\">https://medium.com/media/26d665fd6d29fcc8b693dab8e288dd2d/href</a></iframe><h3>Integration of UI component with React and Angular</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FLO4KIaBWEUTyE%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FLO4KIaBWEUTyE%2Fgiphy-downsized.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FLO4KIaBWEUTyE%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"244\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/a909c004128c3d3353f5b5fb205d7276/href\">https://medium.com/media/a909c004128c3d3353f5b5fb205d7276/href</a></iframe><p>Last step is integration, it is the most interesting part. Let’s start with Angular, it has to increment the counter value.</p><p>We need to make sure the angular can accept non-angular elements, to do it, we need to inject CUSTOM_ELEMENTS_SCHEMA .</p><pre>web-comp-app/apps/ng-app/src/app/app.module.ts</pre><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2317a1a7e8dec220b9ec69ec42c34c2d/href\">https://medium.com/media/2317a1a7e8dec220b9ec69ec42c34c2d/href</a></iframe><p>That is all we need to do with integration, we can use wc-counter-value.element.ts directly now. The last is to update the app.component.ts .</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8101e9ff3aafc06f395e145387b98211/href\">https://medium.com/media/8101e9ff3aafc06f395e145387b98211/href</a></iframe><p>Perfect, time to integrate our shared component with React app now. Go to the:</p><pre>web-comp-app/apps/react-app/src/app/app.tsx</pre><p>And just directly inject the wc-counter-value.element.ts</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/210ff1acfd9c795454926ade8ad65ec0/href\">https://medium.com/media/210ff1acfd9c795454926ade8ad65ec0/href</a></iframe><p>That pretty much it, to safe some time you can clone the repo to try it yourself, enjoy.</p><h3>GitHub link</h3><p><a href=\"https://github.com/Vitashev/web-comp-app\">GitHub - Vitashev/web-comp-app</a></p><h3>Conclusion</h3><p>Even though, it is not too common to have multiple frameworks in one organization, this example demonstrated the flexibility of using web components. <strong>If you interested in the topic and this article collects 800 👏 claps, I will post about best practices of building web components. If you learned anything new, follow me on medium and </strong><a href=\"https://twitter.com/EasyWebOrg\"><strong>twitter</strong></a><strong>.</strong></p><ul><li><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://medium.com/@easy-web/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li></ul><h3>You are amazing, thank you ❤️</h3><p>Admire you people. Your <strong>like 👍</strong> and <strong>follow</strong> ❤️— transforms into positive energy that busts the motivation. Love and respect to all of you, you are amazing people 🙌</p><p><a href=\"https://medium.com/u/1122b7eae991\">Priyanshu MultiQoS</a>, <a href=\"https://medium.com/u/12c8fefb895b\">kranthi</a>, <a href=\"https://medium.com/u/1312a9d8b8b8\">Maulik Rakholiya</a>, <a href=\"https://medium.com/u/167cae5921b4\">M VJ</a>, <a href=\"https://medium.com/u/18f151b69340\">Daniel Minguella Blasco</a>, <a href=\"https://medium.com/u/1a7b4287ab33\">Yong Hong Tan</a>, <a href=\"https://medium.com/u/1cf2275ab92a\">Calal</a>, <a href=\"https://medium.com/u/1d1e51fa7e73\">vmsi krsna</a>, <a href=\"https://medium.com/u/2470aff614d1\">Wangyg Personal</a>, <a href=\"https://medium.com/u/262d5e2aa9e7\">BabyManisha. Sunkara</a>, <a href=\"https://medium.com/u/26c7584c1260\">lexeek</a>, <a href=\"https://medium.com/u/2c3810e34ab2\">Simon</a>, <a href=\"https://medium.com/u/30b0ff991d0\">Trance Cyberian</a>, <a href=\"https://medium.com/u/330099157189\">Timmy Lin</a>, <a href=\"https://medium.com/u/422f69e2c137\">Nam Ng</a>, <a href=\"https://medium.com/u/42cc3a30b6b9\">Raj kiran</a>, <a href=\"https://medium.com/u/432cc657d500\">Kannan Balasubramanian</a>, <a href=\"https://medium.com/u/47ded51826f6\">Vijay Thirugnanam</a>, <a href=\"https://medium.com/u/4d833481f376\">Sheena Irwin</a>, <a href=\"https://medium.com/u/4e4f5ee79b54\">Mahesh Guntumadugu</a>, <a href=\"https://medium.com/u/4f4038440a0d\">Ashok Vardhan</a>, <a href=\"https://medium.com/u/524135512a61\">Sameer Ayyagari</a>, <a href=\"https://medium.com/u/548349015aa7\">Muhammad Wasi</a>, <a href=\"https://medium.com/u/585754441841\">Darsbir Itten</a>, <a href=\"https://medium.com/u/5c2e534982a8\">Tigran Apresyan</a>, <a href=\"https://medium.com/u/5e7e89d70481\">akbar wibawa</a>, <a href=\"https://medium.com/u/617b54139f66\">Sardonyx</a>, <a href=\"https://medium.com/u/6344e0b13b62\">Ben Ji</a>, <a href=\"https://medium.com/u/664350430c08\">Avan Thakkar</a>, <a href=\"https://medium.com/u/679405da2663\">Luke</a>, <a href=\"https://medium.com/u/69af25874bc4\">Quoc Huynh</a>, <a href=\"https://medium.com/u/6a87cb1380d5\">mallikharjuna</a>, <a href=\"https://medium.com/u/6af2e1622b45\">Nguyễn Thanh Bảo</a>, <a href=\"https://medium.com/u/6e21fee0547d\">Shane Healy</a>, <a href=\"https://medium.com/u/6f02d6aaae3\">Deepanshu Tiwari</a>, <a href=\"https://medium.com/u/75486740123f\">Mehdi Davarzani</a>, <a href=\"https://medium.com/u/7629de0c1cc0\">Carlos Inguanzo</a>, <a href=\"https://medium.com/u/78375b5008da\">Hu wh</a>, <a href=\"https://medium.com/u/7a8119750ad3\">bhaskar</a>, <a href=\"https://medium.com/u/859d26fc14dd\">Bibhorsingh</a>, <a href=\"https://medium.com/u/936b051235ca\">UmerFarooq</a>, <a href=\"https://medium.com/u/9d46d10a02a8\">Deniz Yoldaş Aksu</a>, <a href=\"https://medium.com/u/9e5998a6b7d4\">Mahendra Bishnoi</a>, <a href=\"https://medium.com/u/a0c895b39707\">Carolina Ramirez</a>, <a href=\"https://medium.com/u/a23b05cc6d5c\">Shobika Saravanan</a>, <a href=\"https://medium.com/u/a381ae617027\">Thiyagarajan Muthusamy</a>, <a href=\"https://medium.com/u/a3adf4798878\">Shubham Singh</a>, <a href=\"https://medium.com/u/a3e6cc6b10b6\">Naveen Kanth</a>, <a href=\"https://medium.com/u/b6c7e7c02bba\">Siarhei Astapovich</a>, <a href=\"https://medium.com/u/c0ee07ebc073\">Omar Belkhodja</a>, <a href=\"https://medium.com/u/c16b0f30e99c\">Yaroslav</a>, <a href=\"https://medium.com/u/c1ac83cf610\">Zack Ch</a>, <a href=\"https://medium.com/u/c44d4b4a307f\">Mutita Donsomsakunkij</a>, <a href=\"https://medium.com/u/c7647e2dfc12\">Gokul Krishna</a>, <a href=\"https://medium.com/u/cc670bd952b1\">Sett Ran</a>, <a href=\"https://medium.com/u/ce71ac82caaf\">Artur conrado</a>, <a href=\"https://medium.com/u/cf7b71898b17\">Kevin Prakasa</a>, <a href=\"https://medium.com/u/d46747ee079\">Manish Kumar</a>, <a href=\"https://medium.com/u/e2a4cd9ca27b\">Vaibhav Lokhande</a>, <a href=\"https://medium.com/u/e30a25271f06\">Danilo Martins</a>, <a href=\"https://medium.com/u/e4f8f66eb80\">ANJALI CHAUHAN</a>, <a href=\"https://medium.com/u/e63ebfac166b\">Mohammadreza Qadamgahi</a>, <a href=\"https://medium.com/u/e84b728c2410\">Ismael Tech (ismaeldevmw)</a>, <a href=\"https://medium.com/u/ee43e594650\">Rafael Birkmann</a>, <a href=\"https://medium.com/u/ee567819e31b\">Khaled Nehad</a>, <a href=\"https://medium.com/u/f0d6a6b8a7b7\">Santosh Vijapure</a>, <a href=\"https://medium.com/u/f0de257e3ede\">Rajat</a>, <a href=\"https://medium.com/u/f3652c8cdbba\">Shoaib Khan</a>, <a href=\"https://medium.com/u/f46929d59f88\">Dennis Hulsmans</a>, <a href=\"https://medium.com/u/f59bff710e14\">Satish Pednekar</a>, <a href=\"https://medium.com/u/fa36907edc98\">Amir Khan</a> and <a href=\"https://medium.com/u/ff0f3eafc051\">Nenad Brcic</a>.</p><h3>Learn More</h3><ul><li><a href=\"https://itnext.io/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon &amp; LinkedIn</a></li><li><a href=\"https://itnext.io/how-micro-frontend-changes-the-future-of-angular-bb4deb2cfdad\">🔥 How Micro Frontend changes the Future of Angular?</a></li><li><a href=\"https://itnext.io/building-angular-micro-frontend-with-ngrx-state-sharing-and-nx-cli-7e9af10ebd03\">🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9069d8cc9d62\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://itnext.io/how-to-share-the-same-web-components-between-angular-and-react-9069d8cc9d62\">🔥 How to Share the Same Web Components between Angular and React? 🤔</a> was originally published in <a href=\"https://itnext.io\">ITNEXT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "Let’s find out if we can build sharable Web components compatible with any frameworks like Angular and React\n\nContent\n\nIntro\nWhy reusable UI components are important?\nWhat the heck is Web Components?\nProof of Concept\nPrototyping the Angular, React apps, and UI library\nIntegration of UI component with React and Angular\nGitHub link\nConclusion\nYou are amazing, thank you ❤️\nLearn More\n\nIntro\nThere are plenty of UI libraries that provide you a pack of industry common components like buttons, dropdown, modal windows. One of the most popular examples can be material design or bootstrap. The problem with them is that they are not compatible with all the UI frameworks, so you need to integrate them in some way, or use a framework-specific version. Such a solution is not acceptable in most of the use cases, especially when the product is growing and consistency has higher priority than before. Let’s find out together, how to build the UI library, that can be reused in any UI framework?\nWhy reusable UI components are important?\nhttps://medium.com/media/362a6e7964793d2909f7ae285f77464a/href\nBuilding unified, reusable UI components can be useful in many scenarios. With rapidly changing trends in the frontend world, like today React is more popular but tomorrow Angular, or a new framework released that is better than both of them in terms of performance and flexibility. Or a new major version of the framework is not compatible with the previous, and as a result, you can not reuse your old components, that is what happened with the transition from AngularJs to Angular 2+. All of these cases of technology changes affect the frontend quite frequently and create an issue of migrating UI components.\nThe other scenario is when you work on a large enterprise product that builds multiple projects. And these projects are reusing the same UI components. Moreover, the projects may use different UI frameworks. In this case, unified UI components will be very handy.\nAlso, another case happens when in some fast-growing projects, the team decides to open source some of the services or components. If you consider sharing with the world your UI library too, which may have a positive effect on your product and will pay you back with promoting your brand and attracting new customers, you need to think in direction of building a framework-agnostic Ui library.\nAnd the last one, if you are a creator. And you may be the one who wants to work on the open-source project to create your own library. For any reason, like improve karma, create your portfolio for future employers or just enhance your frontend credibility.\nWhat the heck is Web Components?\nhttps://medium.com/media/ed4e12a474c5859ddc0d45b6b698897c/href\nWell, after screening through the different use cases that may get benefits from unified UI components, the question still remains, how to implement it? If we want such a flexible solution, also supported by major browsers, we have to look at the direction of Web Components. It is not a new word in the frontend, web components have a long history and first time were introduced at Fronteers Conference 2011 by Alex Russel. Later on, big tech companies like Google managed to build an open-source library Polymer, that simplified building applications based on Web Components. And finally, browsers, such a Firefox started to support Web Components by default, and until now, Web Components are compatible with all major browsers.\nIn this article we are not going to dive deep into the Web Components, we only show the base implementation and have they can be reused across different frameworks.\nProof of concept\nhttps://medium.com/media/d9d12f2a80636a47f5a22475e1c43c7c/href\nWe are going to implement 2 simple apps, using React and Angular. The apps will consist of a button — “Increment” in Angular app and “Decrement” in React app, clicking on it will increment and decrement value accordingly. Both apps will share a ui-component called counter-value. What it does, is just simply retrieve the value from the parent and display it. The final result will look like this:\n\nPrototyping the Angular, React apps, and UI library\nhttps://medium.com/media/869ed939791e41888912ee93fe488f29/href\nLet’s jump straight to the implementation. In this example, we will use nrwl cli to quickly prototype monorepo with two apps and one shared library.\nFirst, let’s create a workplace and enter the folder:\nnpx create-nx-workspace web-comp-app\ncd web-comp-app/\nNext what we need, is to install all the dependencies:\nnpm install — save-dev @nrwl/angular\nnpm install — save-dev @nrwl/react\nThen we need to generate a shared library and add our reusable ui-component to it.\nnx g @nrwl/web:lib shared/ui-components\ncd libs/shared/ui-components/src/lib\nmkdir wc-counter-value\ncd wc-counter-value\nAnd create file wc-counter-value.element.ts\nhttps://medium.com/media/77ac291bc3b1b5f74915975589de49b5/href\nAfter element is ready, we need to export it from shared library:\nweb-comp-app/libs/shared/ui-components/src/index.ts\nhttps://medium.com/media/26d665fd6d29fcc8b693dab8e288dd2d/href\nIntegration of UI component with React and Angular\nhttps://medium.com/media/a909c004128c3d3353f5b5fb205d7276/href\nLast step is integration, it is the most interesting part. Let’s start with Angular, it has to increment the counter value.\nWe need to make sure the angular can accept non-angular elements, to do it, we need to inject CUSTOM_ELEMENTS_SCHEMA .\nweb-comp-app/apps/ng-app/src/app/app.module.ts\nhttps://medium.com/media/2317a1a7e8dec220b9ec69ec42c34c2d/href\nThat is all we need to do with integration, we can use wc-counter-value.element.ts directly now. The last is to update the app.component.ts .\nhttps://medium.com/media/8101e9ff3aafc06f395e145387b98211/href\nPerfect, time to integrate our shared component with React app now. Go to the:\nweb-comp-app/apps/react-app/src/app/app.tsx\nAnd just directly inject the wc-counter-value.element.ts\nhttps://medium.com/media/210ff1acfd9c795454926ade8ad65ec0/href\nThat pretty much it, to safe some time you can clone the repo to try it yourself, enjoy.\nGitHub link\nGitHub - Vitashev/web-comp-app\nConclusion\nEven though, it is not too common to have multiple frameworks in one organization, this example demonstrated the flexibility of using web components. If you interested in the topic and this article collects 800 👏 claps, I will post about best practices of building web components. If you learned anything new, follow me on medium and twitter.\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\n\nYou are amazing, thank you ❤️\nAdmire you people. Your like 👍 and follow ❤️— transforms into positive energy that busts the motivation. Love and respect to all of you, you are amazing people 🙌\nPriyanshu MultiQoS, kranthi, Maulik Rakholiya, M VJ, Daniel Minguella Blasco, Yong Hong Tan, Calal, vmsi krsna, Wangyg Personal, BabyManisha. Sunkara, lexeek, Simon, Trance Cyberian, Timmy Lin, Nam Ng, Raj kiran, Kannan Balasubramanian, Vijay Thirugnanam, Sheena Irwin, Mahesh Guntumadugu, Ashok Vardhan, Sameer Ayyagari, Muhammad Wasi, Darsbir Itten, Tigran Apresyan, akbar wibawa, Sardonyx, Ben Ji, Avan Thakkar, Luke, Quoc Huynh, mallikharjuna, Nguyễn Thanh Bảo, Shane Healy, Deepanshu Tiwari, Mehdi Davarzani, Carlos Inguanzo, Hu wh, bhaskar, Bibhorsingh, UmerFarooq, Deniz Yoldaş Aksu, Mahendra Bishnoi, Carolina Ramirez, Shobika Saravanan, Thiyagarajan Muthusamy, Shubham Singh, Naveen Kanth, Siarhei Astapovich, Omar Belkhodja, Yaroslav, Zack Ch, Mutita Donsomsakunkij, Gokul Krishna, Sett Ran, Artur conrado, Kevin Prakasa, Manish Kumar, Vaibhav Lokhande, Danilo Martins, ANJALI CHAUHAN, Mohammadreza Qadamgahi, Ismael Tech (ismaeldevmw), Rafael Birkmann, Khaled Nehad, Santosh Vijapure, Rajat, Shoaib Khan, Dennis Hulsmans, Satish Pednekar, Amir Khan and Nenad Brcic.\nLearn More\n\n🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon & LinkedIn\n🔥 How Micro Frontend changes the Future of Angular?\n🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli\n\n🔥 How to Share the Same Web Components between Angular and React? 🤔 was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/9069d8cc9d62",
    "categories": [
      "front-end-development",
      "javascript",
      "web-components",
      "react",
      "angular"
    ],
    "isoDate": "2021-12-17T17:40:50.000Z"
  },
  {
    "creator": "Vitalii Shevchuk",
    "title": " Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon & LinkedIn",
    "link": "https://itnext.io/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7?source=rss-e3c7b0002690------2",
    "pubDate": "Sun, 05 Dec 2021 20:55:28 GMT",
    "content:encoded": "<p>If you are preparing for a frontend interview and want to quickly refresh your frontend domain knowledge, this cheatsheet will save you a lot of time.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JtxlGQj6I6myX-uihhHrEg.png\" /></figure><h3>Content</h3><p><a href=\"#93de\"><strong>Intro</strong></a></p><p><a href=\"#f45b\"><strong>Web Knowledge</strong></a></p><ul><li><a href=\"#21a5\"><strong>1. Caching</strong></a></li><li><a href=\"#4f67\"><strong>2. HTTP/2</strong></a></li><li><a href=\"#48af\"><strong>3. Security</strong></a></li></ul><p><a href=\"#59ff\"><strong>Web Performance</strong></a></p><ul><li><a href=\"#cfb1\"><strong>1. Critical Rendering Path</strong></a></li><li><a href=\"#5178\"><strong>2. Reflow</strong></a></li><li><a href=\"#b7ea\"><strong>3. preload, preconnect, prefetch, prerender</strong></a></li><li><a href=\"#3a67\"><strong>4. Rendering Performance</strong></a></li><li><a href=\"#88cf\"><strong>5. Workers</strong></a></li><li><a href=\"#d8e2\"><strong>6. Image Optimization</strong></a></li></ul><p><a href=\"#b93f\"><strong>DOM</strong></a></p><ul><li><a href=\"#6776\"><strong>1. Elements</strong></a></li><li><a href=\"#c97c\"><strong>2. Manipulation</strong></a></li><li><a href=\"#96ac\"><strong>3. Document Fragment</strong></a></li><li><a href=\"#7e69\"><strong>4. Event delegation and bubbling</strong></a></li></ul><p><a href=\"#a4e7\"><strong>HTML</strong></a></p><ul><li><a href=\"#fb9d\"><strong>1. Semantic Elements</strong></a></li><li><a href=\"#dd22\"><strong>2. Accessibility</strong></a></li><li><a href=\"#115c\"><strong>3. Responsive web</strong></a></li></ul><p><a href=\"#071b\"><strong>Javascript</strong></a></p><ul><li><strong>1.</strong><a href=\"#84ab\"><strong>this</strong></a></li><li><a href=\"#84b2\"><strong>2. Closure</strong></a></li><li><a href=\"#34f3\"><strong>3. Inheritance</strong></a></li><li><a href=\"#0728\"><strong>4. Asynchronous Javascript</strong></a></li><li><a href=\"#3cb1\"><strong>5. Hoisting</strong></a></li><li><a href=\"#59bc\"><strong>6. Currying</strong></a></li><li><a href=\"#6b87\"><strong>7. Higher-order functions</strong></a></li></ul><p><a href=\"#ebeb\"><strong>Design patterns</strong></a></p><ul><li><a href=\"#88ca\"><strong>1. Mixin</strong></a></li><li><a href=\"#c627\"><strong>2. Factory</strong></a></li><li><a href=\"#862f\"><strong>3. Singleton</strong></a></li><li><a href=\"#0b77\"><strong>4. Facade</strong></a></li><li><a href=\"#ca84\"><strong>5. MVC, MVVM</strong></a></li><li><a href=\"#829f\"><strong>6. Server vs Client-Side Rendering</strong></a></li></ul><p><a href=\"#29b4\"><strong>Conclusion</strong></a></p><p><a href=\"#3534\"><strong>You are Awesome</strong></a><strong> ❤️</strong></p><p><a href=\"#9985\"><strong>Learn More</strong></a></p><h3>Intro</h3><p>Of course, there is not enough space to fit all the frontend knowledge into one article. And this is not what this cheatsheet wants to achieve. This is just a shortcut of frontend topic, that each sr frontend engineer has to be familiar with. They are frequently raised in interviews and helped me to get an offer on Amazon and LinkedIn. Enjoy reading, and feel free to dive deeper by clicking on the topic link 🙌</p><h3>Web Knowledge</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FTI32JwHmWQEi4%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FTI32JwHmWQEi4%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FTI32JwHmWQEi4%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"226\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/70f1e28f65fd9437e3a18065524fc6ea/href\">https://medium.com/media/70f1e28f65fd9437e3a18065524fc6ea/href</a></iframe><p><strong><em>1. Caching</em></strong></p><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\"><strong><em>Cache-Control</em></strong></a>: instruction of request and response cache;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag\"><strong><em>Etag</em></strong></a><em>: &lt;cache_id&gt;</em>check if the resource was updated by comparing <em>&lt;cache_id&gt;</em>, if not — update the cached version;</li></ul><p><strong><em>2. </em></strong><a href=\"https://www.sitepoint.com/http2-the-pros-the-cons-and-what-you-need-to-know/\"><strong><em>HTTP/2</em></strong></a></p><p><em>Pros:</em></p><ul><li>Multiple HTTP connection calls (HTTP/1 supports only 6);</li><li>A server can push an event to a client;</li><li>Compress headers;</li><li>More secure</li></ul><p><em>Cons:</em></p><ul><li>Server push can be abused;</li><li>Can be slower if LB (Load Balancer) supports HTTP/1 and server HTTP/2</li></ul><p><strong><em>3. Security</em></strong></p><ul><li><a href=\"https://www.geeksforgeeks.org/http-headers-transfer-encoding/\"><em>Transfer-Encoding</em></a><em> </em>— defines how to encrypt body: <em>chunked</em>, <em>gzip;</em></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\"><em>Access-Control-Allow-Origin</em></a><em> </em>(Cross-Origin Resource Sharing — CORS) Defines a list of domains that can access the API of the origin domain;</li><li><a href=\"https://www.w3schools.com/js/js_json_jsonp.asp#:~:text=JSONP%20stands%20for%20JSON%20with,instead%20of%20the%20XMLHttpRequest%20object.\"><em>JSONP</em></a> — run script to access cross-domain data (old browser);</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"><em>X-Frame-Options</em></a> — Prevent clickjacking from iframe;</li><li><a href=\"https://owasp.org/www-community/attacks/csrf\"><em>Cross-Site Request Forgery</em></a><strong> (</strong>CSRF). <em>Attack</em>: user has a session (logged in), attacker creates link, user clicks on the link and performs the request, attacker steals user session. <em>Prevent: </em>captcha, log out from visited site;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\"><em>Content-Security-Policy</em></a> — prevent from execution harmful code;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\"><em>X-XSS-Protection</em></a> — Enable XSS protection for old sites;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy\"><em>Feature-Policy</em></a><em> — </em>Disable not needed Browser features;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\"><em>Referrer-Policy</em></a> — when there is a link to another website from your site, by clicking it will send the URL of origin which can contain some sensitive data (user id, session);</li><li>Don&#39;t allow the user to input any HTML innerHtml ;</li><li>Use UI frameworks, keep node_modules updated, and limit of usage 3rd party services;</li></ul><h3>Web Performance</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FkVCSuojs6dvMK6zUWE%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FkVCSuojs6dvMK6zUWE%2Fgiphy-downsized.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FkVCSuojs6dvMK6zUWE%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"243\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/20dd3f56737f6d69b5613f0c9e1b8361/href\">https://medium.com/media/20dd3f56737f6d69b5613f0c9e1b8361/href</a></iframe><p><strong><em>1. </em></strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path\"><strong><em>Critical Rendering Path</em> </strong></a>— steps browser makes to paint the page. The steps are:</p><ul><li><em>DOM</em> — browser compiles the Document Object Model;</li><li><em>CSSOM</em> — browser compiles the CSS Object Model;</li><li><em>Render Tree </em>— browser combines DOM and CSSOM to render the tree;</li><li><em>Layout</em> — browser computes the size and position of each of the objects;</li><li><em>Paint</em> — browser converts the tree into the pixels in the screen;</li></ul><p>Optimize <strong><em>CRP:</em></strong></p><ul><li><em>Optimize the order of sources</em> — load critical resources as soon as possible;</li><li><em>Minimize the number of sources</em> — reduce the number, load async;</li></ul><p><strong><em>2. </em></strong><a href=\"https://developers.google.com/speed/docs/insights/browser-reflow\"><strong><em>Reflow</em></strong></a><em> —</em>Browser<em> </em>recalculates the position and geometries of the elements after rerender.</p><p>Optimize <strong><em>Reflow:</em></strong></p><ul><li>reduce DOM depths;</li><li>avoid long CSS selectors, minimize rules;</li></ul><p><strong><em>3. preload, preconnect, prefetch, prerender</em></strong></p><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload\"><em>preload</em></a><em> — </em>loads high prior sources that need to be loaded faster&lt;link rel=&quot;preload&quot;&gt; ;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preconnect\"><em>preconnect </em></a><em>— </em>If some resources are required to accelerate handshake, use&lt;link rel=&quot;preconnect&quot;&gt;to reduce latency;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Prefetch\"><em>prefetch</em></a> — loads low prior resources and cache &lt;link rel=&quot;prefetch&quot;&gt;;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch\"><em>dns-prefetch</em></a>—reduce latency of resolving domain names before resources get requested &lt;link rel=&quot;dns-prefetch&quot;&gt;;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/prerender\">prerender</a> — similar to <em>prefetch</em> + caches whole the page &lt;link rel=&quot;prerender&quot;&gt; ;</li></ul><p><strong><em>4. Rendering Performance</em></strong></p><p><strong>JS:</strong></p><ul><li>Move the heavy task to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">web worker</a>;</li><li>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">requestAnimatinFrame</a> instead of setTimeoutto perform animation;</li></ul><p><strong>Style:</strong></p><ul><li>reduce the complexity of selectors;</li><li>Reduce the number of elements on which style calculation must be applied;</li></ul><p><strong>Layout:</strong> (how an element is positioned and sized)</p><ul><li>Avoid layout changes;</li><li>Use <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">flexbox</a>;</li><li>Use <a href=\"https://itnext.io/how-i-learned-css-grid-in-5-min-ec6439d8bf0\">css-grid</a>;</li></ul><p><strong>Paint:</strong> (draw pixels: color, shadows; layout changes trigger repaint)</p><ul><li>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\">will-change</a> to optimize layout repaint;</li></ul><p><strong><em>5. Workers</em></strong></p><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker\"><em>Service Worker </em></a><em>— </em>interceptor to build an offline app;</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\"><em>Web Worker</em></a><em> — </em>perform heavy tasks on background;</li></ul><p><strong><em>6. Image optimization</em></strong></p><p><strong>Format</strong><em>:</em></p><ul><li>if animation — use &lt;video&gt;instead <em>gif</em></li><li>if high details and resolution — <em>PNG</em></li><li>if geometry shapes — <em>SVG</em></li><li>if text logo — use font text</li><li>if photo — <em>JPEG</em></li></ul><p><strong>Compression</strong><em>:</em></p><ul><li><em>SVG</em> — use optimizer (like <a href=\"https://github.com/svg/svgo\">SVGO</a>), use gzip;</li><li><em>WebP</em> — use optimized image format for Web;</li><li>Remove metadata attributes from <em>SVG tag;</em></li><li>Use <a href=\"https://www.w3schools.com/css/css_image_sprites.asp\"><em>Sprites</em></a>;</li></ul><p><strong>Cache and Lazy Load</strong><em>:</em></p><ul><li>Use <a href=\"https://aws.amazon.com/cloudfront/\"><em>CDN</em></a> for distributing static data;</li><li><em>Lazy Load</em> images and videos — Use &lt;img loading=&quot;lazy&quot;/&gt; or libraries like <a href=\"https://github.com/aFarkas/lazysizes\"><em>lazysizes</em></a>;</li></ul><h3>DOM</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2Fl0JMrPWRQkTeg3jjO%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2Fl0JMrPWRQkTeg3jjO%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2Fl0JMrPWRQkTeg3jjO%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"271\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e831d372549517830cd6c8f2bcbb2120/href\">https://medium.com/media/e831d372549517830cd6c8f2bcbb2120/href</a></iframe><p><strong><em>1. Elements</em></strong></p><ul><li><strong>selector:</strong> getElementById, getElementByTagName, querySelector,<em> </em>querySelectorAll;</li><li><strong>navigation: </strong>children (elements): childNodes (nodes) , firstElementChild, lastElementChild, parentElement, previousElementSibling, nextElementSibling;</li><li><strong>attributes:</strong> classList, clientHeight, clientWidth, childElementCount,<em> </em>setAttribute(attrName, value) removeAttribute(attrName) removeAttribute(attrName) ;</li></ul><p><strong><em>2. Manipulation</em></strong></p><p>createElement(‘div’), append, prepend, el.cloneNode(true), remove(), insertBefore(newNode, beforeNode), insertAfter(newNode, afterNode);</p><p><strong><em>3. </em></strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment\"><strong><em>Document Fragment</em></strong></a><em> — </em>creates a virtual copy of a document, that can store multiple elements. By inserting <em>document fragment</em> into DOM, it becomes empty, and cause only one <a href=\"#5178\">reflow</a>;</p><p><strong><em>4. </em></strong><a href=\"https://programmingwithmosh.com/javascript/javascript-event-bubbling-and-event-delegation/\"><strong><em>Event delegation and bubbling</em></strong></a></p><ul><li>When we emit an <em>Event, </em>ex. click, the event is bubbling up to &lt;html&gt; element through the parentElement link:</li></ul><pre>-html (bubble click)<br>   -body (bubble click)<br>        -div (bubble click)<br>            -p <br>            -p (click)</pre><ul><li><em>Delegation</em> is used to improve performance. Let’s say we have a structure:</li></ul><pre>-div.parent<br>    -p.child <br>    -p.child<br>    -p.child</pre><p>And we want to assign an addEventListener to .child , in this case, we have to attach event to 3 elements. Instead, we can attach event only to .parent and resolve the logic.</p><pre>document.querySelector(&quot;.parent&quot;).addEventListener(&quot;click&quot;, function(event) {<br>    if (event.target.classList.contains(&quot;child&quot;)) {<br>      // you logic is here<br>    };<br>});</pre><h3>HTML</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2Fl3vRfNA1p0rvhMSvS%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2Fl3vRfNA1p0rvhMSvS%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2Fl3vRfNA1p0rvhMSvS%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"174\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d544256d6e75c237d28c382dc2668f78/href\">https://medium.com/media/d544256d6e75c237d28c382dc2668f78/href</a></iframe><p><strong><em>1. Semantic Elements</em></strong> — clearly describes its meaning with its name to developer and browser: &lt;article&gt;, &lt;aside&gt;, &lt;details&gt;, &lt;figcaption&gt;, &lt;figure&gt;, &lt;footer&gt;, &lt;header&gt;, &lt;main&gt;, &lt;mark&gt;, &lt;nav&gt;, &lt;section&gt;, &lt;summary&gt;, &lt;time&gt; ;</p><p><strong><em>2. Accessibility</em></strong></p><ul><li>Use headers &lt;h1&gt;,&lt;h2&gt;,&lt;h3&gt;… ;</li><li>Use &lt;img alt=””;</li><li>Use attributetabindex=”index_position” to navigate the focus using Tab key;</li><li>Use roles like &lt;ul role=”list”&gt;&lt;li role=”listitem”&gt;, &lt;dialog role=”dialog”. Find the whole list <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"><strong>here</strong></a>;</li><li>Use accesskey=”key” for creating keyboard shortcuts;</li><li>use attributes to describe the element:aria-label=”label_text”or aria-labelledby=”text_id”, aria-describedby=”text_id” and &lt;label id=&quot;text_id&quot;&gt;label_text&lt;/label&gt; ;</li><li>Use color contrasts, textures;</li><li>Use text size;</li><li>Use captions in a video;</li></ul><p><strong><em>3. Responsive web</em></strong></p><ul><li>Add &lt;meta viewport name=”viewport” content=”width=device-width, initial-scale=1.0&quot; to give browser direction to scale;</li><li>Use &lt;img max-width=”100%” and the image will not scale more than its size;</li><li>Use &lt;<a href=\"https://www.w3schools.com/tags/tag_picture.asp\">picture</a>&gt; &lt;source srcset=”” media=”” &gt; to specify images for different screen sizes;</li><li>Responsive <a href=\"https://css-tricks.com/confused-rem-em/\"><strong>font sizes</strong></a>: em and rem ;</li><li>Use <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\">media queries</a>;</li></ul><h3>Javascript</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2F26tn33aiTi1jkl6H6%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F26tn33aiTi1jkl6H6%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2F26tn33aiTi1jkl6H6%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"244\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/53c433cc54b5b6de2b774b317a463275/href\">https://medium.com/media/53c433cc54b5b6de2b774b317a463275/href</a></iframe><p><strong><em>1. </em></strong><a href=\"https://javascript.info/object-methods\"><strong><em>this</em></strong></a></p><ul><li>this is a reference to the object where a function is <strong>called</strong>;</li><li>default this context is window;</li><li>context which function will get from the place it called;</li><li>arrow function -&gt; takes context which function is <strong>defined;</strong></li><li>this loses context when we call one function inside another function</li></ul><pre>function Foo() {<br>    console.log(this); <br>}<br>Foo(); // at this line the context is &#39;window&#39;<br>// output: &#39;window&#39;</pre><pre>var foo1 = new Foo(); // at this line the context binds to &#39;foo1&#39;<br>// output: &#39;Foo {}&#39;</pre><ul><li>Explicitly assign the context of this : foo1.apply(context, arrayOfArgs), foo1.call(context, arg1, arg2, …), var foo2 = foo1.bind(context, arg1, arg2, …)— returns an instance of function with given context;</li></ul><p><strong><em>2. </em></strong><a href=\"https://javascript.info/closure\"><strong><em>Closure</em></strong></a><strong><em> — </em></strong>functions ability to remember and access scope even if was called from another scope (function return function/block scope in block scope)</p><pre>function a(arg1) { // arg1 scoped<br>    var arg2 = 0; // arg2 scoped</pre><pre>    return function b(){<br>        ++arg2;<br>        return arg1 + arg2;<br>    }<br>}</pre><pre>var foo = a(2);<br>foo(); // 2<br>foo(); // 3<br>var foo2 = a(4);<br>foo(); // 4<br>foo(); // 5</pre><p><strong><em>3. </em></strong><a href=\"https://javascript.info/prototype-inheritance\"><strong><em>Inheritance</em></strong></a></p><ul><li>To inherit obj1 from obj2 , you can link an object to another object var obj1 = Object.create(obj2);</li><li>JS uses prototype inheritance. Each object has a __proto__ link. If we access any property of an object, the JS engine first checks if the object has it, if not — checks the prototype, and goes through __proto__ chain to find the property name, and then throws undefined if didn’t find;</li></ul><p><strong><em>4. </em></strong><a href=\"https://itnext.io/the-evolution-of-asynchronous-patterns-in-javascript-64efc8938b16\"><strong><em>Asynchronous Javascript</em></strong></a></p><ul><li><strong>Event loop</strong>: In JS there are 3 types of memory: stack used for functions call, heap for each of the objects, queue — setTimeout. JS engine executes the function stack first. If the stack is empty, it pops the event from queue. If the event queue has another function call, it pushes it to stack and executes it again until it is empty. This is called event loop;</li><li>JS uses callback, promise, async-await to implement asynchronous patterns. You can read more about <strong>async JS</strong> and <strong>event loop</strong> in this article:</li></ul><p><a href=\"https://itnext.io/the-evolution-of-asynchronous-patterns-in-javascript-64efc8938b16\">🔥 The Evolution of Asynchronous Patterns in JavaScript</a></p><p><strong><em>5. </em></strong><a href=\"https://javascript.info/var\"><strong><em>Hoisting</em></strong></a></p><ul><li>function definition moves to the top of block scope during JS compilation, then goes var ;</li><li>let and const are hoisted too but in the temporary dead zone;</li></ul><pre>// Code example              // After hoisting <br>1. console.log(&#39;hoisting&#39;);  1. function foo(){<br>2. var a;                    2.    return null;<br>3. function foo(){           3. }<br>4.    return null;           4. var a;<br>5. }                         5. console.log(&#39;hoisting&#39;);<br>6. a = 5;                    6. a = 5;</pre><p><strong><em>6. </em></strong><a href=\"https://javascript.info/currying-partials\"><strong><em>Currying</em></strong></a><strong><em> </em></strong><em>— nested functions:</em></p><pre>function calcABC(a){<br>    return function(b){<br>        return function(c){<br>            return a+b+c;<br>        }<br>    }<br>}</pre><pre>console.log(calcABC(1)(2)(3));<br>// 6</pre><p><strong><em>7. </em></strong><a href=\"https://www.freecodecamp.org/news/a-quick-intro-to-higher-order-functions-in-javascript-1a014f89c6b/\"><strong><em>Higher-order functions</em></strong></a></p><ul><li>map, reduce, filter, find</li><li>You can chain higher-order function into composition</li></ul><pre>[1,2,3,4,5].map((num) =&gt; ({age: num})).filter((el) =&gt; el.age &lt; 4);<br>// [{age: 1}, {age: 2}, {age: 3}]</pre><h3>Design patterns</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FzxxXYJqTlpBnO%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FzxxXYJqTlpBnO%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FzxxXYJqTlpBnO%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"234\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/04a5e73ceb2460740f68853565b5d4d2/href\">https://medium.com/media/04a5e73ceb2460740f68853565b5d4d2/href</a></iframe><p><strong><em>1. </em></strong><a href=\"https://javascript.info/mixins\"><strong><em>Mixin</em></strong></a><strong><em> — </em></strong>extend the functionality of an object with the list of methods;</p><pre>// Option 1<br>class Person{}</pre><pre>let Mixin = {foo(){}};</pre><pre>Object.assign(Person.prototype, Mixin);</pre><pre>let person = new Person();</pre><pre>person.foo();</pre><pre>// Option 2</pre><pre>let Mixin1 = {foo1(){}};</pre><pre>let Mixin2  = {__proto__: Mixin1, foo2(){}};</pre><p><strong><em>2. </em></strong><a href=\"https://www.javascripttutorial.net/javascript-factory-functions/\"><strong><em>Factory</em></strong></a><strong><em> </em></strong><em>— a </em>class<em> </em>that can create one or many different objects (useful if you want to generate different mock data in Unit Tests);</p><pre>personFactory.one({name: &#39;John&#39;}); -&gt; Person{name: &#39;John&#39;, age: 5}<br>personFactory.many(); -&gt; [Person{name: &#39;Bill&#39;, age: 7}, Person{name: &#39;Anna&#39;, age: 3}]</pre><p><strong><em>3. </em></strong><a href=\"https://www.sitepoint.com/javascript-design-patterns-singleton/\"><strong><em>Singleton</em></strong></a><strong><em> </em></strong>— class which you can call method directly, without creating an object;</p><pre>let mySingleton = (function() {</pre><pre>    let instance = null;</pre><pre>    function init(){<br>        return {<br>           //list all the methods</pre><pre>           method(){}<br>        }<br>    }<br>    if(instance == null){<br>        instance = init();<br>    }</pre><pre>    return instance;<br>})();</pre><pre>mySingleton.method();</pre><p><strong><em>4. </em></strong><a href=\"https://www.dofactory.com/javascript/design-patterns/facade\"><strong><em>Facade</em></strong></a><strong><em> — </em></strong>abstract more complex logic and wrap it in class. For example, service that stays between component and API layer:</p><pre>ui component - Facade service (complex state object) - API layer (Redux);</pre><p><strong><em>5. MVC, MVVM — </em></strong><a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"><strong>Model View Controller</strong></a> and <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel\"><strong>Model View ViewModel</strong></a><strong>.</strong></p><p><em>React is MVC</em></p><ul><li>state — Model;</li><li>JSX — View;</li><li>actions (violate — can be mixed with view) — Controller ;</li></ul><p><em>Angular is MVVM</em></p><ul><li>component — ModelView</li><li>template — View (violate — not reusable)</li><li>properties — Model</li></ul><p><strong><em>6. </em></strong><a href=\"https://www.freecodecamp.org/news/what-exactly-is-client-side-rendering-and-hows-it-different-from-server-side-rendering-bd5c786b340d/\"><strong><em>Server vs Client-Side Rendering</em></strong></a></p><p><strong>SSR — </strong>Use SSR if a site is stable, static, SEO focused, can pay for additional servers;</p><p><em>pros</em></p><ul><li>Faster page load (viewable, but not interactable);</li><li>Better for search engines (faster indexing);</li><li>Better with sites that have a lot of static content (blogs);</li></ul><p><em>cons</em></p><ul><li>More server requests;</li><li>Slower render to interact;</li><li>Full page reloads;</li></ul><p><strong>CSR — </strong>Use CSR if site under development, dynamic;</p><p><em>pros</em></p><ul><li>Faster render after initial load;</li><li>Best for web app;</li></ul><p><em>cons</em></p><ul><li>The initial load can require more time</li></ul><h3>Conclusion</h3><p>There is a ton of information that a developer needs to know to be confident to pass a frontend interview in big tech companies. Though the more complex rounds are made up of coding problems and system design (<strong>BTW, if you are interested in a separate article about coding problems, let’s collect 5000 claps👏</strong>), the domain of frontend knowledge is way important to dodge any type of web concept questions. Don’t forget to <strong>follow</strong> <strong>and</strong> <strong>subscribe</strong> <strong>if you learned something new today</strong> (and want to get more insights weekly). See you soon. 😉</p><ul><li><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://medium.com/@easy-web/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li></ul><h3>You are Awesome <strong>❤️</strong></h3><p>Huge respect to all these amazing people who recently joined my feed. Thank you everyone for keeping me motivated, you are the best! 🙌</p><p><a href=\"https://medium.com/u/1315d767bc08\">Aljo</a>, <a href=\"https://medium.com/u/14da6d285753\">Maurício Júnior</a>, <a href=\"https://medium.com/u/18095afe580a\">Camilo Muñoz Hernandez</a>, <a href=\"https://medium.com/u/18231e6c0fa0\">Jose Eduardo Rodriguez</a>, <a href=\"https://medium.com/u/19e7f746109e\">Paul Smithson</a>, <a href=\"https://medium.com/u/1a5280efd409\">Deep Patel</a>, <a href=\"https://medium.com/u/1b602356e00a\">Zully Chumpitaz</a>, <a href=\"https://medium.com/u/1cf1a0fa6a74\">Denis Akira</a>, <a href=\"https://medium.com/u/2106f4ea014\">kaustubh shukla</a>, <a href=\"https://medium.com/u/349bcb5e1008\">Abi Amarulloh</a>, <a href=\"https://medium.com/u/4782cb922156\">Yogesh Tiwari</a>, <a href=\"https://medium.com/u/483d6cff9e4a\">Maxim Porcari</a>, <a href=\"https://medium.com/u/4b39dee637da\">AMI</a>, <a href=\"https://medium.com/u/58486ea8a4f7\">Avani Arora</a>, <a href=\"https://medium.com/u/58f110f34a9f\">Diksha Naiwal</a>, <a href=\"https://medium.com/u/6091e12cd88\">Gert Jan van Dijk</a>, <a href=\"https://medium.com/u/68556a8aab76\">prathamesh karangutkar</a>, <a href=\"https://medium.com/u/6a87cb1380d5\">mallikharjuna</a>, <a href=\"https://medium.com/u/6e21fee0547d\">Shane Healy</a>, <a href=\"https://medium.com/u/7629de0c1cc0\">Carlos Inguanzo</a>, <a href=\"https://medium.com/u/7b2ff2c58591\">Earl Cornet</a>, <a href=\"https://medium.com/u/7b5fc7484497\">akhila nair</a>, <a href=\"https://medium.com/u/7dfbaa8e05fa\">Vasily</a>, <a href=\"https://medium.com/u/7ebbde6d2aeb\">tom margraff</a>, <a href=\"https://medium.com/u/7edfd3c7f528\">David Fekke</a>, <a href=\"https://medium.com/u/80674453aca0\">Abdullah Shabbir Mirza</a>, <a href=\"https://medium.com/u/815a3fa230fe\">Gordon Luk</a>, <a href=\"https://medium.com/u/83d94803ecf2\">Samael Saverem</a>, <a href=\"https://medium.com/u/889d2fc474dc\">Karim</a>, <a href=\"https://medium.com/u/abcf206295f6\">DaveMartin</a>, <a href=\"https://medium.com/u/bc81b7d485f3\">leidy johana llanos culma</a>, <a href=\"https://medium.com/u/c5a0044e1ffc\">Myat Thiha</a>, <a href=\"https://medium.com/u/d43869306393\">Arhtur Fedotiev</a>, <a href=\"https://medium.com/u/da76585ee1c9\">Catalin Matei</a>, <a href=\"https://medium.com/u/e4a8ae29f03f\">Phao</a>, <a href=\"https://medium.com/u/e944f5035d97\">Andy Kononenko IRONSOURCE LTD</a>, <a href=\"https://medium.com/u/ed5207c06b88\">jyoti verma</a>, <a href=\"https://medium.com/u/f6415a0d8972\">Sakam PavanKumar Reddy</a>, <a href=\"https://medium.com/u/f99d5bd0d7c4\">nuke</a>.</p><h3>Learn more</h3><ul><li><a href=\"https://itnext.io/how-to-become-a-sr-frontend-engineer-in-amazon-without-leetcode-9b7ec604a12\">How to Become a Senior Frontend Engineer in Amazon without LeetCode 🔥</a></li><li><a href=\"https://itnext.io/how-micro-frontend-changes-the-future-of-angular-bb4deb2cfdad\">🔥 How Micro Frontend changes the Future of Angular?</a></li><li><a href=\"https://itnext.io/how-to-scale-angular-without-limits-e6a6ca15111\">🔥 How to Scale Angular Without Limits</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cba9584e33c7\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://itnext.io/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon &amp; LinkedIn</a> was originally published in <a href=\"https://itnext.io\">ITNEXT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "If you are preparing for a frontend interview and want to quickly refresh your frontend domain knowledge, this cheatsheet will save you a lot of time.\n\nContent\nIntro\nWeb Knowledge\n\n1. Caching\n2. HTTP/2\n3. Security\n\nWeb Performance\n\n1. Critical Rendering Path\n2. Reflow\n3. preload, preconnect, prefetch, prerender\n4. Rendering Performance\n5. Workers\n6. Image Optimization\n\nDOM\n\n1. Elements\n2. Manipulation\n3. Document Fragment\n4. Event delegation and bubbling\n\nHTML\n\n1. Semantic Elements\n2. Accessibility\n3. Responsive web\n\nJavascript\n\n1.this\n2. Closure\n3. Inheritance\n4. Asynchronous Javascript\n5. Hoisting\n6. Currying\n7. Higher-order functions\n\nDesign patterns\n\n1. Mixin\n2. Factory\n3. Singleton\n4. Facade\n5. MVC, MVVM\n6. Server vs Client-Side Rendering\n\nConclusion\nYou are Awesome ❤️\nLearn More\nIntro\nOf course, there is not enough space to fit all the frontend knowledge into one article. And this is not what this cheatsheet wants to achieve. This is just a shortcut of frontend topic, that each sr frontend engineer has to be familiar with. They are frequently raised in interviews and helped me to get an offer on Amazon and LinkedIn. Enjoy reading, and feel free to dive deeper by clicking on the topic link 🙌\nWeb Knowledge\nhttps://medium.com/media/70f1e28f65fd9437e3a18065524fc6ea/href\n1. Caching\n\nCache-Control: instruction of request and response cache;\nEtag: <cache_id>check if the resource was updated by comparing <cache_id>, if not — update the cached version;\n\n2. HTTP/2\nPros:\n\nMultiple HTTP connection calls (HTTP/1 supports only 6);\nA server can push an event to a client;\nCompress headers;\nMore secure\n\nCons:\n\nServer push can be abused;\nCan be slower if LB (Load Balancer) supports HTTP/1 and server HTTP/2\n\n3. Security\n\nTransfer-Encoding — defines how to encrypt body: chunked, gzip;\nAccess-Control-Allow-Origin (Cross-Origin Resource Sharing — CORS) Defines a list of domains that can access the API of the origin domain;\nJSONP — run script to access cross-domain data (old browser);\nX-Frame-Options — Prevent clickjacking from iframe;\nCross-Site Request Forgery (CSRF). Attack: user has a session (logged in), attacker creates link, user clicks on the link and performs the request, attacker steals user session. Prevent: captcha, log out from visited site;\nContent-Security-Policy — prevent from execution harmful code;\nX-XSS-Protection — Enable XSS protection for old sites;\nFeature-Policy — Disable not needed Browser features;\nReferrer-Policy — when there is a link to another website from your site, by clicking it will send the URL of origin which can contain some sensitive data (user id, session);\nDon't allow the user to input any HTML innerHtml ;\nUse UI frameworks, keep node_modules updated, and limit of usage 3rd party services;\n\nWeb Performance\nhttps://medium.com/media/20dd3f56737f6d69b5613f0c9e1b8361/href\n1. Critical Rendering Path — steps browser makes to paint the page. The steps are:\n\nDOM — browser compiles the Document Object Model;\nCSSOM — browser compiles the CSS Object Model;\nRender Tree — browser combines DOM and CSSOM to render the tree;\nLayout — browser computes the size and position of each of the objects;\nPaint — browser converts the tree into the pixels in the screen;\n\nOptimize CRP:\n\nOptimize the order of sources — load critical resources as soon as possible;\nMinimize the number of sources — reduce the number, load async;\n\n2. Reflow —Browser recalculates the position and geometries of the elements after rerender.\nOptimize Reflow:\n\nreduce DOM depths;\navoid long CSS selectors, minimize rules;\n\n3. preload, preconnect, prefetch, prerender\n\npreload — loads high prior sources that need to be loaded faster<link rel=\"preload\"> ;\npreconnect — If some resources are required to accelerate handshake, use<link rel=\"preconnect\">to reduce latency;\nprefetch — loads low prior resources and cache <link rel=\"prefetch\">;\ndns-prefetch—reduce latency of resolving domain names before resources get requested <link rel=\"dns-prefetch\">;\nprerender — similar to prefetch + caches whole the page <link rel=\"prerender\"> ;\n\n4. Rendering Performance\nJS:\n\nMove the heavy task to the web worker;\nUse requestAnimatinFrame instead of setTimeoutto perform animation;\n\nStyle:\n\nreduce the complexity of selectors;\nReduce the number of elements on which style calculation must be applied;\n\nLayout: (how an element is positioned and sized)\n\nAvoid layout changes;\nUse flexbox;\nUse css-grid;\n\nPaint: (draw pixels: color, shadows; layout changes trigger repaint)\n\nUse will-change to optimize layout repaint;\n\n5. Workers\n\nService Worker — interceptor to build an offline app;\nWeb Worker — perform heavy tasks on background;\n\n6. Image optimization\nFormat:\n\nif animation — use <video>instead gif\nif high details and resolution — PNG\nif geometry shapes — SVG\nif text logo — use font text\nif photo — JPEG\n\nCompression:\n\nSVG — use optimizer (like SVGO), use gzip;\nWebP — use optimized image format for Web;\nRemove metadata attributes from SVG tag;\nUse Sprites;\n\nCache and Lazy Load:\n\nUse CDN for distributing static data;\nLazy Load images and videos — Use <img loading=\"lazy\"/> or libraries like lazysizes;\n\nDOM\nhttps://medium.com/media/e831d372549517830cd6c8f2bcbb2120/href\n1. Elements\n\nselector: getElementById, getElementByTagName, querySelector, querySelectorAll;\nnavigation: children (elements): childNodes (nodes) , firstElementChild, lastElementChild, parentElement, previousElementSibling, nextElementSibling;\nattributes: classList, clientHeight, clientWidth, childElementCount, setAttribute(attrName, value) removeAttribute(attrName) removeAttribute(attrName) ;\n\n2. Manipulation\ncreateElement(‘div’), append, prepend, el.cloneNode(true), remove(), insertBefore(newNode, beforeNode), insertAfter(newNode, afterNode);\n3. Document Fragment — creates a virtual copy of a document, that can store multiple elements. By inserting document fragment into DOM, it becomes empty, and cause only one reflow;\n4. Event delegation and bubbling\n\nWhen we emit an Event, ex. click, the event is bubbling up to <html> element through the parentElement link:\n\n-html (bubble click)\n   -body (bubble click)\n        -div (bubble click)\n            -p \n            -p (click)\n\nDelegation is used to improve performance. Let’s say we have a structure:\n\n-div.parent\n    -p.child \n    -p.child\n    -p.child\nAnd we want to assign an addEventListener to .child , in this case, we have to attach event to 3 elements. Instead, we can attach event only to .parent and resolve the logic.\ndocument.querySelector(\".parent\").addEventListener(\"click\", function(event) {\n    if (event.target.classList.contains(\"child\")) {\n      // you logic is here\n    };\n});\nHTML\nhttps://medium.com/media/d544256d6e75c237d28c382dc2668f78/href\n1. Semantic Elements — clearly describes its meaning with its name to developer and browser: <article>, <aside>, <details>, <figcaption>, <figure>, <footer>, <header>, <main>, <mark>, <nav>, <section>, <summary>, <time> ;\n2. Accessibility\n\nUse headers <h1>,<h2>,<h3>… ;\nUse <img alt=””;\nUse attributetabindex=”index_position” to navigate the focus using Tab key;\nUse roles like <ul role=”list”><li role=”listitem”>, <dialog role=”dialog”. Find the whole list here;\nUse accesskey=”key” for creating keyboard shortcuts;\nuse attributes to describe the element:aria-label=”label_text”or aria-labelledby=”text_id”, aria-describedby=”text_id” and <label id=\"text_id\">label_text</label> ;\nUse color contrasts, textures;\nUse text size;\nUse captions in a video;\n\n3. Responsive web\n\nAdd <meta viewport name=”viewport” content=”width=device-width, initial-scale=1.0\" to give browser direction to scale;\nUse <img max-width=”100%” and the image will not scale more than its size;\nUse <picture> <source srcset=”” media=”” > to specify images for different screen sizes;\nResponsive font sizes: em and rem ;\nUse media queries;\n\nJavascript\nhttps://medium.com/media/53c433cc54b5b6de2b774b317a463275/href\n1. this\n\nthis is a reference to the object where a function is called;\ndefault this context is window;\ncontext which function will get from the place it called;\narrow function -> takes context which function is defined;\nthis loses context when we call one function inside another function\n\nfunction Foo() {\n    console.log(this); \n}Foo(); // at this line the context is 'window'\n// output: 'window'\nvar foo1 = new Foo(); // at this line the context binds to 'foo1'\n// output: 'Foo {}'\n\nExplicitly assign the context of this : foo1.apply(context, arrayOfArgs), foo1.call(context, arg1, arg2, …), var foo2 = foo1.bind(context, arg1, arg2, …)— returns an instance of function with given context;\n\n2. Closure — functions ability to remember and access scope even if was called from another scope (function return function/block scope in block scope)\nfunction a(arg1) { // arg1 scoped\n    var arg2 = 0; // arg2 scoped\n    return function b(){\n        ++arg2;\n        return arg1 + arg2;\n    }\n}\nvar foo = a(2);\nfoo(); // 2\nfoo(); // 3\nvar foo2 = a(4);\nfoo(); // 4\nfoo(); // 5\n3. Inheritance\n\nTo inherit obj1 from obj2 , you can link an object to another object var obj1 = Object.create(obj2);\nJS uses prototype inheritance. Each object has a __proto__ link. If we access any property of an object, the JS engine first checks if the object has it, if not — checks the prototype, and goes through __proto__ chain to find the property name, and then throws undefined if didn’t find;\n\n4. Asynchronous Javascript\n\nEvent loop: In JS there are 3 types of memory: stack used for functions call, heap for each of the objects, queue — setTimeout. JS engine executes the function stack first. If the stack is empty, it pops the event from queue. If the event queue has another function call, it pushes it to stack and executes it again until it is empty. This is called event loop;\nJS uses callback, promise, async-await to implement asynchronous patterns. You can read more about async JS and event loop in this article:\n\n🔥 The Evolution of Asynchronous Patterns in JavaScript\n5. Hoisting\n\nfunction definition moves to the top of block scope during JS compilation, then goes var ;\nlet and const are hoisted too but in the temporary dead zone;\n\n// Code example              // After hoisting \n1. console.log('hoisting');  1. function foo(){\n2. var a;                    2.    return null;\n3. function foo(){           3. }\n4.    return null;           4. var a;\n5. }                         5. console.log('hoisting');\n6. a = 5;                    6. a = 5;\n6. Currying — nested functions:\nfunction calcABC(a){\n    return function(b){\n        return function(c){\n            return a+b+c;\n        }\n    }\n}\nconsole.log(calcABC(1)(2)(3));\n// 6\n7. Higher-order functions\n\nmap, reduce, filter, find\nYou can chain higher-order function into composition\n\n[1,2,3,4,5].map((num) => ({age: num})).filter((el) => el.age < 4);\n// [{age: 1}, {age: 2}, {age: 3}]\nDesign patterns\nhttps://medium.com/media/04a5e73ceb2460740f68853565b5d4d2/href\n1. Mixin — extend the functionality of an object with the list of methods;\n// Option 1\nclass Person{}\nlet Mixin = {foo(){}};\nObject.assign(Person.prototype, Mixin);\nlet person = new Person();\nperson.foo();\n// Option 2\nlet Mixin1 = {foo1(){}};\nlet Mixin2  = {__proto__: Mixin1, foo2(){}};\n2. Factory — a class that can create one or many different objects (useful if you want to generate different mock data in Unit Tests);\npersonFactory.one({name: 'John'}); -> Person{name: 'John', age: 5}\npersonFactory.many(); -> [Person{name: 'Bill', age: 7}, Person{name: 'Anna', age: 3}]\n3. Singleton — class which you can call method directly, without creating an object;\nlet mySingleton = (function() {\n    let instance = null;\n    function init(){\n        return {\n           //list all the methods\n           method(){}\n        }\n    }\n    if(instance == null){\n        instance = init();\n    }\n    return instance;\n})();\nmySingleton.method();\n4. Facade — abstract more complex logic and wrap it in class. For example, service that stays between component and API layer:\nui component - Facade service (complex state object) - API layer (Redux);\n5. MVC, MVVM — Model View Controller and Model View ViewModel.\nReact is MVC\n\nstate — Model;\nJSX — View;\nactions (violate — can be mixed with view) — Controller ;\n\nAngular is MVVM\n\ncomponent — ModelView\ntemplate — View (violate — not reusable)\nproperties — Model\n\n6. Server vs Client-Side Rendering\nSSR — Use SSR if a site is stable, static, SEO focused, can pay for additional servers;\npros\n\nFaster page load (viewable, but not interactable);\nBetter for search engines (faster indexing);\nBetter with sites that have a lot of static content (blogs);\n\ncons\n\nMore server requests;\nSlower render to interact;\nFull page reloads;\n\nCSR — Use CSR if site under development, dynamic;\npros\n\nFaster render after initial load;\nBest for web app;\n\ncons\n\nThe initial load can require more time\n\nConclusion\nThere is a ton of information that a developer needs to know to be confident to pass a frontend interview in big tech companies. Though the more complex rounds are made up of coding problems and system design (BTW, if you are interested in a separate article about coding problems, let’s collect 5000 claps👏), the domain of frontend knowledge is way important to dodge any type of web concept questions. Don’t forget to follow and subscribe if you learned something new today (and want to get more insights weekly). See you soon. 😉\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\n\nYou are Awesome ❤️\nHuge respect to all these amazing people who recently joined my feed. Thank you everyone for keeping me motivated, you are the best! 🙌\nAljo, Maurício Júnior, Camilo Muñoz Hernandez, Jose Eduardo Rodriguez, Paul Smithson, Deep Patel, Zully Chumpitaz, Denis Akira, kaustubh shukla, Abi Amarulloh, Yogesh Tiwari, Maxim Porcari, AMI, Avani Arora, Diksha Naiwal, Gert Jan van Dijk, prathamesh karangutkar, mallikharjuna, Shane Healy, Carlos Inguanzo, Earl Cornet, akhila nair, Vasily, tom margraff, David Fekke, Abdullah Shabbir Mirza, Gordon Luk, Samael Saverem, Karim, DaveMartin, leidy johana llanos culma, Myat Thiha, Arhtur Fedotiev, Catalin Matei, Phao, Andy Kononenko IRONSOURCE LTD, jyoti verma, Sakam PavanKumar Reddy, nuke.\nLearn more\n\nHow to Become a Senior Frontend Engineer in Amazon without LeetCode 🔥\n🔥 How Micro Frontend changes the Future of Angular?\n🔥 How to Scale Angular Without Limits\n\n🔥 Frontend Interview Cheatsheet That Helped Me Get Offers From Amazon & LinkedIn was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/cba9584e33c7",
    "categories": [
      "html",
      "javascript",
      "software-development",
      "front-end-development",
      "interview"
    ],
    "isoDate": "2021-12-05T20:55:28.000Z"
  },
  {
    "creator": "Vitalii Shevchuk",
    "title": " What to Expect from Angular 14 in 2022: Is Micro Frontend Coming? ",
    "link": "https://itnext.io/what-to-expect-from-angular-14-in-2022-is-micro-frontend-coming-7932566f773?source=rss-e3c7b0002690------2",
    "pubDate": "Sun, 21 Nov 2021 20:22:18 GMT",
    "content:encoded": "<p>Angular 13 has been recently released but the changes were more <strong>evolutionary</strong>, can we expect more <strong>revolutionary</strong> updates from <strong>Angular 14</strong>?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gZmwrzFpVe9kq5U-S8mJXQ.jpeg\" /></figure><ul><li><a href=\"#a789\"><strong>Intro</strong></a></li><li><a href=\"#f827\"><strong>3 BIG THINGs are coming in Angular 14</strong></a></li><li><a href=\"#68db\"><strong>Will Micro Frontend be supported in the next release?</strong></a></li><li><a href=\"#ac4d\"><strong>Conclusion</strong></a></li><li><a href=\"#ac4d\"><strong>Learn More</strong></a></li><li><a href=\"#57f7\"><strong>You are Amazing 🤩</strong></a></li></ul><h3>Intro</h3><p>After the release of Angular 13 that was not enough hype around it, even though it really deserves more attention. Such updates like <em>TypeScript 4.4 </em>and <em>RxJs 7.4</em> support sound nice, but the main cherry on the cake was <strong>build caching</strong>, which improved build time up to <strong>68%</strong>. But when to expect a really <em>Big Thing</em>, the update, that would be able to shake the frontend community again since introducing Ivy.</p><p><em>Let’s find out together!</em></p><h3>3 BIG THINGs are coming in Angular 14</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FxUPJPAby1Na8JL4A9i%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FxUPJPAby1Na8JL4A9i%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FxUPJPAby1Na8JL4A9i%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"326\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e083e235ec959dbdb6c8b4defb6a309f/href\">https://medium.com/media/e083e235ec959dbdb6c8b4defb6a309f/href</a></iframe><p>The Angular team periodically shares its roadmap of upcoming releases. They collect them from community feedbacks and combine with the internal features roadmap. Let&#39;s take a look together at the most exciting from them.</p><p><strong>Better typing @angular/forms. </strong>These changes will affect on <em>reactive forms</em> types model and will make type checking much more striker than before. The team is aiming at implementing the type system that will be compatible with other angular versions, and will not cause regression. Such a feature will allow developers to find the issues during development time and significantly improve type checking.</p><p><strong>Independent Components from Module. </strong>Let’s try to answer the question, <em>which is the only frontend framework that components are not “units of reuse”? </em>And, of course, you know the answer — only Angular framework is all built around the <em>Modules</em>. In Angular, Modules actually act as “<em>units of reuse</em>”, for example, angular libraries are publishing NgModules or NgModule is the main unit of lazy-loading. Such a concept doesn&#39;t allow to use of directives, pipes, and what is even more important — components individually, outside the scope of the module.</p><p>The fact that Modules are the core building blocks in Angular, set a list of limitations on developing experience:</p><ul><li><em>Components</em> must be <em>always dependent</em> on Modules and be part of the Module, it can not be standalone;</li><li><em>Complex API</em> around <em>loading</em> and <em>rendering</em> <em>components. </em>For example, using bootstrapModule() vs bootstrapComponent()</li><li>Angular tooling is tightly dependent on Modules during optimizing the build performance.</li></ul><p>The main efforts will be made to change the architecture that will put <em>components</em>, <em>directives</em>, and <em>pipes</em> in the central of framework. In simple words, you will be able to <strong><em>import</em></strong><em> components, directives, and pipes </em><strong><em>and</em></strong><em> </em><strong><em>use</em></strong><em> them </em><strong><em>directly</em></strong>.</p><p>And the last — is what the Angular community created a story about and has been waiting for a long time — <strong>Micro Frontend Support</strong>.</p><h3><strong>Will Micro Frontend be supported in the next release?</strong></h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FrEacvqT82PKsU%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FrEacvqT82PKsU%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FrEacvqT82PKsU%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"193\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9bea3bd245a6224e0236e2774be3bb34/href\">https://medium.com/media/9bea3bd245a6224e0236e2774be3bb34/href</a></iframe><p>They are a lot of discussions around Micro Frontend and to find out why it is cool and why Angular is a perfect framework for it, check out another article first:</p><p><a href=\"https://itnext.io/how-micro-frontend-changes-the-future-of-angular-bb4deb2cfdad\">🔥 How Micro Frontend changes the Future of Angular?</a></p><p>Webpack has already approached the future after introducing <em>Module Federation</em>. It let you to have multiple separated builds in a single application. The team from NX also integrated it into their command line which made it easier to bootstrap micro frontend applications. The last important thing is that all these tools are perfectly combined with angular architecture. If you are curious about how to build it yourself, check out this article.</p><p><a href=\"https://itnext.io/building-angular-micro-frontend-with-ngrx-state-sharing-and-nx-cli-7e9af10ebd03\">🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli</a></p><p><em>You may say, that this is all cool, but what we can expect from the Angular team in the next release?</em> Currently, they are working on investigating the best abstraction to have better support of micro frontend. It is understandable, as such support will require huge legacy changes in the core of the angular framework. This investigation includes looking closely into independent deployment, as well as the development of large-scale micro frontend applications and finding ways to integrate them with angular architecture. We may only guess that they work with the Webpack team and NX team to make the integration process more productive.</p><h3><strong>Conclusion</strong></h3><p>There is a very little information if the Micro Frontend will be supported in Angular 14, or any other upcoming releases. And this will be definitely the next <em>BIG THING</em> in Angular and for the whole frontend community in general. It is also obvious that such a big step can not be done in a short time. On the other hand, the Angular team is always paying attention and reacts to the community&#39;s needs and feedbacks. And arousing the discussion around it will make the Angular team prioritize it higher. <strong><em>If you would like to participate and can not wait for Micro Frontend support in Angular, clap 👏 the article, comment or repost to attract more attention to this topic</em></strong>. <em>Stay tuned and follow me on </em><a href=\"https://medium.com/@easy-web/subscribe\"><em>medium</em></a><em> and </em><a href=\"https://twitter.com/EasyWebOrg\"><em>twitter</em></a><em> to get updated on latest news about Micro Frontend and web technologies.</em></p><h3><strong>Learn More</strong></h3><ul><li><a href=\"https://itnext.io/how-micro-frontend-changes-the-future-of-angular-bb4deb2cfdad\">🔥 How Micro Frontend changes the Future of Angular?</a></li><li><a href=\"https://itnext.io/building-angular-micro-frontend-with-ngrx-state-sharing-and-nx-cli-7e9af10ebd03\">🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli</a></li><li><a href=\"https://itnext.io/how-to-scale-angular-without-limits-e6a6ca15111\">🔥 How to Scale Angular Without Limits</a></li></ul><h3><strong>You are Amazing 🤩</strong></h3><p>Thank you to these <strong>amazing people</strong> who joined me this week 🤗, I feel inspired to have YOU in my network, and keep going to grow the community for passionate web developers. <strong>Don’t forget to subscribe to receive more web devs insights on weekly basis, see you soon</strong> 😉.</p><ul><li><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://medium.com/@easy-web/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li></ul><p><a href=\"https://medium.com/u/1bd0883739f5\">sebastian higuita</a>, <a href=\"https://medium.com/u/1ec26ace3af5\">Manoj Kumar</a>, <a href=\"https://medium.com/u/21a22c8fe0db\">Beck Chen</a>, <a href=\"https://medium.com/u/2a21dd1968e3\">Anatoliy Targhoniy</a>, <a href=\"https://sequestroshedirpharma.medium.com/\">Sequestro Shedir Pharma</a>, <a href=\"https://medium.com/u/44028eb64892\">Giorgi Nutsubidze</a>, <a href=\"https://medium.com/u/5d2985194f99\">Vivek Gupta</a>, <a href=\"https://medium.com/u/5dc6d2d4fd54\">情封</a>, <a href=\"https://medium.com/u/6731c428f33c\">Jasonprogrammer</a>, <a href=\"https://medium.com/u/848e8d226503\">Bazla Kausar</a>, <a href=\"https://medium.com/u/90822231ba89\">Evgenia Maksymiv</a>, <a href=\"https://medium.com/u/946183af0794\">Mouhamedyaya</a>, <a href=\"https://medium.com/u/99fc41323224\">mohamed enab</a>, <a href=\"https://medium.com/u/dd257f371e28\">Andrew Trots</a>, <a href=\"https://medium.com/u/f02aa01bf533\">dhrumil shah</a>, <a href=\"https://medium.com/u/d448572bcc04\">Aravindan Mahadevan</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7932566f773\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://itnext.io/what-to-expect-from-angular-14-in-2022-is-micro-frontend-coming-7932566f773\">🔥 What to Expect from Angular 14 in 2022: Is Micro Frontend Coming? 🤫</a> was originally published in <a href=\"https://itnext.io\">ITNEXT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "Angular 13 has been recently released but the changes were more evolutionary, can we expect more revolutionary updates from Angular 14?\n\nIntro\n3 BIG THINGs are coming in Angular 14\nWill Micro Frontend be supported in the next release?\nConclusion\nLearn More\nYou are Amazing 🤩\n\nIntro\nAfter the release of Angular 13 that was not enough hype around it, even though it really deserves more attention. Such updates like TypeScript 4.4 and RxJs 7.4 support sound nice, but the main cherry on the cake was build caching, which improved build time up to 68%. But when to expect a really Big Thing, the update, that would be able to shake the frontend community again since introducing Ivy.\nLet’s find out together!\n3 BIG THINGs are coming in Angular 14\nhttps://medium.com/media/e083e235ec959dbdb6c8b4defb6a309f/href\nThe Angular team periodically shares its roadmap of upcoming releases. They collect them from community feedbacks and combine with the internal features roadmap. Let's take a look together at the most exciting from them.\nBetter typing @angular/forms. These changes will affect on reactive forms types model and will make type checking much more striker than before. The team is aiming at implementing the type system that will be compatible with other angular versions, and will not cause regression. Such a feature will allow developers to find the issues during development time and significantly improve type checking.\nIndependent Components from Module. Let’s try to answer the question, which is the only frontend framework that components are not “units of reuse”? And, of course, you know the answer — only Angular framework is all built around the Modules. In Angular, Modules actually act as “units of reuse”, for example, angular libraries are publishing NgModules or NgModule is the main unit of lazy-loading. Such a concept doesn't allow to use of directives, pipes, and what is even more important — components individually, outside the scope of the module.\nThe fact that Modules are the core building blocks in Angular, set a list of limitations on developing experience:\n\nComponents must be always dependent on Modules and be part of the Module, it can not be standalone;\nComplex API around loading and rendering components. For example, using bootstrapModule() vs bootstrapComponent()\nAngular tooling is tightly dependent on Modules during optimizing the build performance.\n\nThe main efforts will be made to change the architecture that will put components, directives, and pipes in the central of framework. In simple words, you will be able to import components, directives, and pipes and use them directly.\nAnd the last — is what the Angular community created a story about and has been waiting for a long time — Micro Frontend Support.\nWill Micro Frontend be supported in the next release?\nhttps://medium.com/media/9bea3bd245a6224e0236e2774be3bb34/href\nThey are a lot of discussions around Micro Frontend and to find out why it is cool and why Angular is a perfect framework for it, check out another article first:\n🔥 How Micro Frontend changes the Future of Angular?\nWebpack has already approached the future after introducing Module Federation. It let you to have multiple separated builds in a single application. The team from NX also integrated it into their command line which made it easier to bootstrap micro frontend applications. The last important thing is that all these tools are perfectly combined with angular architecture. If you are curious about how to build it yourself, check out this article.\n🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli\nYou may say, that this is all cool, but what we can expect from the Angular team in the next release? Currently, they are working on investigating the best abstraction to have better support of micro frontend. It is understandable, as such support will require huge legacy changes in the core of the angular framework. This investigation includes looking closely into independent deployment, as well as the development of large-scale micro frontend applications and finding ways to integrate them with angular architecture. We may only guess that they work with the Webpack team and NX team to make the integration process more productive.\nConclusion\nThere is a very little information if the Micro Frontend will be supported in Angular 14, or any other upcoming releases. And this will be definitely the next BIG THING in Angular and for the whole frontend community in general. It is also obvious that such a big step can not be done in a short time. On the other hand, the Angular team is always paying attention and reacts to the community's needs and feedbacks. And arousing the discussion around it will make the Angular team prioritize it higher. If you would like to participate and can not wait for Micro Frontend support in Angular, clap 👏 the article, comment or repost to attract more attention to this topic. Stay tuned and follow me on medium and twitter to get updated on latest news about Micro Frontend and web technologies.\nLearn More\n\n🔥 How Micro Frontend changes the Future of Angular?\n🔥 Building Angular Micro Frontend with NgRx state sharing and NX cli\n🔥 How to Scale Angular Without Limits\n\nYou are Amazing 🤩\nThank you to these amazing people who joined me this week 🤗, I feel inspired to have YOU in my network, and keep going to grow the community for passionate web developers. Don’t forget to subscribe to receive more web devs insights on weekly basis, see you soon 😉.\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\n\nsebastian higuita, Manoj Kumar, Beck Chen, Anatoliy Targhoniy, Sequestro Shedir Pharma, Giorgi Nutsubidze, Vivek Gupta, 情封, Jasonprogrammer, Bazla Kausar, Evgenia Maksymiv, Mouhamedyaya, mohamed enab, Andrew Trots, dhrumil shah, Aravindan Mahadevan\n\n🔥 What to Expect from Angular 14 in 2022: Is Micro Frontend Coming? 🤫 was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/7932566f773",
    "categories": [
      "web-development",
      "front-end-development",
      "javascript",
      "software-development",
      "angular"
    ],
    "isoDate": "2021-11-21T20:22:18.000Z"
  },
  {
    "creator": "Vitalii Shevchuk",
    "title": "How to Become a Senior Frontend Engineer in Amazon without LeetCode ",
    "link": "https://itnext.io/how-to-become-a-sr-frontend-engineer-in-amazon-without-leetcode-9b7ec604a12?source=rss-e3c7b0002690------2",
    "pubDate": "Sun, 14 Nov 2021 23:43:30 GMT",
    "content:encoded": "<h3>🔥 How to Become a Senior Frontend Engineer in Amazon without LeetCode?</h3><h4>This is not clickbait, this is a story of how I went from hating LeetCode to getting multiple offers in Big Tech.</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*I8CwYNqQW8sRpAF1baHw6g.jpeg\" /></figure><h3>Content</h3><ul><li><a href=\"#ea71\"><strong>Intro</strong></a></li><li><a href=\"#a766\"><strong>Big Tech Companies are for lucky people</strong></a></li><li><a href=\"#0f52\"><strong>Excuses of Coding Problems Interviews</strong></a></li><li><a href=\"#39da\"><strong>I hate LeetCode</strong></a></li><li><a href=\"#2683\"><strong>The Mindset of Success</strong></a></li><li><a href=\"#ab01\"><strong>Conclusion</strong></a></li><li><a href=\"#d24e\"><strong>Learn More</strong></a></li><li><a href=\"#b158\"><strong>Thank you, Everyone 🙏</strong></a></li></ul><h3>Intro</h3><p>A massive amount of people are striving and struggling every day to prepare for an interview in so-called FAANG companies (Facebook, Amazon, Apple, Netflix, Google) 😓. The preparation strategies are similar and include solving a huge number of coding problems in LeetCode or in other similar platforms. This article is about why companies give coding problems in interviews and the mindset that helped me to get multiple offers in Big Tech.</p><p>If you would like to read about the preparation process, as well as the materials and resources I have used, please check this article first</p><p><a href=\"https://medium.com/@easy-web/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet that helped me to get Offer on Amazon and LinkedIn</a></p><p>Just for the acknowledgment, I had the interviews with Google, Facebook, Amazon, LinkedIn, DoorDash and received 2 offers from which I have chosen an Amazon.</p><p>Enjoy the reading 😉.</p><h3>Big Tech Companies are for lucky people</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2F12XDYvMJNcmLgQ%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F12XDYvMJNcmLgQ%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2F12XDYvMJNcmLgQ%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"325\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3036ebf1372b812578b622f81b6c5de0/href\">https://medium.com/media/3036ebf1372b812578b622f81b6c5de0/href</a></iframe><p>Joining a Big Tech company is the greatest success in life, you will get all the perks: experience, status, free food, money, stability 💵. But this type of job is also not for everyone. As a downside, you may be unlucky and stuck with an extra-challenging project and team, where you will ruin your work-life harmony to get the promotion. But, let’s say you are very determined, and decided to give up on your life for at least one year, and worked hard and got your dream offer. Don’t be misled, even if you solved thousands of LeetCode problems, and read a few giant books about system design, it is still not enough.</p><p>To be accurate, it will never be enough, as there are too many factors that can affect your interview process. Personal factors like being too nervous, not being familiar with a particular type of coding problem, not getting enough sleep, insufficient self-control or focus, feeling tired, other personal problems, bad time management. Then there are the external factors: problems with the internet, cannot understand the interviewer (microphone issue, accent, language barrier), cannot reach out to the call, or just having a bad day. I would give only <strong>20%</strong> (in my humble estimation) of success to<strong> preparation</strong>, and the rest <strong>80%</strong> is dependent on <strong>luck</strong>. <em>You may think why do you even need to go through the preparation if the chances are that low?</em> The reason is that you can barely predict the future and rely only on luck; what you can do is make your 20% preparation completely foolproof.</p><h3>Excuses of Coding Problems Interviews</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2Fl2JdUqVVmYZxLWOkw%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2Fl2JdUqVVmYZxLWOkw%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2Fl2JdUqVVmYZxLWOkw%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"331\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/64f06d7a96884069ab9935ac08a9ed62/href\">https://medium.com/media/64f06d7a96884069ab9935ac08a9ed62/href</a></iframe><p>The topic of coding problems in interviews is quite controversial. On one hand, there are thousands of CVs and referrals a day to get the opportunity for being noticed, and companies have to filter people somehow. On the other hand, is it not showing your qualification and doesn’t evaluate your experience.</p><p>The different companies have their own interview process, but you can expect phone and on-site interviews from each of them. The key topics usually involve <strong>coding problems</strong> and <strong>system design</strong>, but they also vary depending on the role and experience. <em>Why do Big Tech companies even give coding problems if they want to hire qualified engineers, but not competitive programmers?</em></p><p>One of the reasons may be <strong><em>proof of hard work</em></strong><em>. </em>It is obvious to everyone that you don’t solve such problems in the real world. And for each of the candidates, it means a marathon with the length of a year or even more. It requires gaining new skills, organization of your study routine, planning ahead, and a lot of practicing with try and fail. If you can do such hard, unfamiliar work, out of hours, consistently and improve each day, it proves your ability to study and work hard. These skills are crucially important in any IT company, but especially in FAANG as well.</p><p><strong><em>Solving coding problems make us equal</em></strong>. It doesn’t require your background, your previous experience and evaluates all the candidates from the same perspective. It may sound optimistic enough, that everyone is at a similar level, and you can get the offer even if you came from different background. All you need to do is to study hard and prepare well, <em>not a big deal, yeah </em>😅. At the same time, many candidates’ experience is not taken into consideration, so that they cannot use their expertise even if they applied for the relevant role, because of the lack of coding problem-solving skills. And <em>it’s not equal enough</em>, as some people can have more time to prepare and freshen up on Computer Science knowledge like undergraduates, while others have time and energy-consuming work, as well as family and kids that require additional attention. But there are people who don’t have strong computer science, engineering or math background and yet successfully work as software engineers. Also, such an approach will standardize the candidates, but what to do to candidates that are not as strong in this particular skill, but quite outstanding in others, more related to the real world? <em>It could have a strong effect on the diversity of the teams.</em></p><p><strong><em>Analytic skills evaluation</em></strong>. Well, it may be another argument in favor of coding problems. Such a task can evaluate analytic skills, time management, speed, creativity, problem-solving skills. It might be true, but the fact is, that such skills are mostly applicable to specific types of problems. In fact, nowadays the highest percentage of software engineers’ work is mostly soft skills, and when it comes to problem-solving, it falls into search in G<em>oogle</em> or <em>Stack Overflow </em>🤷‍♀️.</p><p>Anyway, big tech has an absolute right to set the requirements as high as they want. This is the IT market, and you are paying this price to get all these benefits and big salaries. You may treat it as an investment, a long-term investment, you are preparing for a long time to get a higher reward. That can give you the motivation and energy to move forward and don’t give up in the long run.</p><h3>I hate LeetCode</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2F26uf1EUQzKKGcIhJS%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F26uf1EUQzKKGcIhJS%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2F26uf1EUQzKKGcIhJS%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"299\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8e52d0c1a4d8aba53b9e7dc65b4205d5/href\">https://medium.com/media/8e52d0c1a4d8aba53b9e7dc65b4205d5/href</a></iframe><p>I have to admit — practicing coding problems really can give you some personal benefits, not taking into consideration all the interview-related stuff.</p><p>It trains you to <strong><em>build discipline</em></strong>. You have to organize your time and preparation routine to make sure you progress and don’t ruin your personal life too much.</p><p>The requirements of solving the coding problem are usually quite strict, and just coming up with the solution is far from enough. You have to <em>code fast</em>, the code has to be <em>modular</em>, variables have to follow <em>good naming conventions</em>, the code has to be <em>bug-free</em>, etc. All of this forces you to keep in mind different aspects and think twice, and even more, before saying anything or starting to write the code. The key is to practice to the level when you are fluent enough to do everything automatically, it has to become a part of you. At the end of the preparation cycle, you will become a <strong><em>time management</em></strong> machine. Overall it is a useful skill in your everyday life, and improving it, will make your life more efficient.</p><p>Alright, but what is the dark side of practicing coding problems? First, <strong><em>you are most likely not good </em></strong>at it. Only if you are <em>competitive programmer</em> or have just graduated from computer science and have fresh memory and more time to practice will you be naturally good at it. And if you don’t even have an engineering or computer science degree, your last math course was in high school and you turned 30, you will never be good enough. Why? Simply because you need a ton of practice and study to reach the required bar, and it’s not even one year. Remember that you have to compete with thousands of candidates that you will be compared with. So, just approaching the coding interview bar is equal to <em>getting a new education.</em></p><p>Another stone in the coding problems garden is <strong><em>too strict evaluation</em></strong>. Most of the companies have metrics to evaluate a candidate from different angles. And all these metrics have so called <em>red flags</em>, meaning that if candidate hits some of them, it is definitely <em>no pass</em>. Just want to remind you that we are all humans, and humans make mistakes. Such strict rules only give pass to people who are very fluent in coding problems, or are lucky to encounter similar or same problem, or robots 🤖. And it’s only the tip of the iceberg, here is the whole list: you have <em>45 minutes to solve 2 problems, you need to listen to each problem in 5 minutes, come up with an optimal solution in 5–10 min, so you have left 15-25 min to write optimal, bug-free, modular, good variable naming code and provide a few test cases to debug 2 problems.</em> Really, in order to make it, there are multiple factors that have to be combined, you must be extremely fluent with the set of coding problems, you have to be lucky to get the same or similar problem that you are familiar with, you have to keep maximum of your self-control and minimize the nerves. Good luck and have fun. 😉</p><p><strong><em>There are too many coding problems</em></strong>. Along with the classic ones, new ones are being introduced every day. Big Tech companies keep adding new problems, as candidates are more prepared with respect to the classic stack. Since 4 months of joining Amazon, the number of coding problems on LeetCode increased by 300, and it is only what people shared. This number is overwhelming, and the later you join, the more you have to prepare. In addition to that, you have to redo the problems that you are not fluent with which makes the process even more time-consuming.</p><p><strong><em>Too many interview rounds. </em></strong>When you pass the phone interview, the next step will be on-site. And it usually has 5–7 rounds in a row. Depending on the level, you may have 3 coding rounds if it’s junior, or 2–3 plus system design if you are senior. Yep, it is a lot. Some of the companies have only a 5 min break in between, and others in different time zones which will shift your interview to the early morning. Despite the fact that the average human can keep attention for only 20 mins, the number of rounds will make you exhausted 😰. You have to be energetic, focused and successful in each of the rounds. It happened to me, that one on-site was 7 rounds, and the last round had a coding problem. My head was completely blank and all my mental powers were drained, so I obviously failed it very badly. The math is simple, the more interviews the more chance to fail.</p><h3>The Mindset of Success</h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2Fgd0Dqg6rYhttBVCZqd%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2Fgd0Dqg6rYhttBVCZqd%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2Fgd0Dqg6rYhttBVCZqd%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"362\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/12e635f5fcb176ec2bc72164d90e918a/href\">https://medium.com/media/12e635f5fcb176ec2bc72164d90e918a/href</a></iframe><p><strong><em>Then, after all this struggle, do you still want to try to get your dream job?</em></strong> Get ready for it, and start building your mindset that helps you to develop problem-solving skills. Keep in mind, that you will never be ready, so<strong><em> </em></strong>just<strong><em> set a plan</em></strong>, <strong><em>follow it continuously</em></strong>, and then when you complete it, just give it a shot. My personal routine was to get up at 7:30, practice LeetCode for an hour, then start my regular work. Then repeat it in the evening at 21:00 for 2 hours. Saturday is the day off, and Sunday practice the whole day long. I have completed the plan after 1 year, starting from zero.</p><p>There are multiple points that I feel are important during preparation to succeed with a coding interview:</p><p>The first is<strong> <em>not enough sleep</em>. </strong>It will not make your memory work more efficiently. Make sure you have at least 8 hours of sleep every day. Let your brain build new connections.</p><p>Don’t give up on <strong><em>physical activities</em></strong>. You can include jogging, jumping rope, basketball. Prioritize sport that is more cardio-focused. It will make you breathe more, and as a result, get more oxygen which is crucially important for your brain 🧠.</p><p><strong><em>Take notes</em></strong> all the time. You have to get some output from each of the problems. This is how you grow and become better. Later you will review and repeat these notes multiple times. These notes are your blood and sweat. They will also make you remember things better and longer.</p><p><strong><em>Don’t take a pause </em></strong>during your preparation routine. The goal is to be in peak condition. The last month has to be dedicated to the repetition of your notes. Don’t plan any long-term vacations in the upcoming year. You will need to take it when you will start to schedule interviews.</p><p><strong><em>Don’t schedule too many interviews</em></strong> in a short period of time. My mistake was that I took 2 weeks of vacation with my employer at that time. I targeted top-tier companies by getting the referrals or writing to recruiters directly. You have to do it in advance so that at the time when you are ready, you schedule them in your preferable order. In the end, I had Google, Facebook, Amazon, LinkedIn, DoorDash interviews for each day of the week. It was fine in the beginning, but after phone interview rounds were passed, I had to schedule on-sites on each day of the week after. Thinking back, it was too dense. Each on-site is 5–7 rounds, you are going to be burnt out fast 🔥. So take more time and make sure you have at least one day gap between the on-sites.</p><p>Focus more on <strong><em>companies</em></strong> that have<strong><em> fewer coding problems interviews</em></strong>. And this one was a <strong><em>key point of my success </em>🤩</strong>. Yes, it may be surprising for you, that not all Big Tech companies are so focused coding problem interviews. For <strong>DoorDash</strong>, it was to implement a UI widget in real-time with API integration and state management. They let you choose your frontend framework which you have more expertise with. In my opinion, it was the most relevant interview, and exactly what you can expect from a frontend role. It is fairer as it is a real-world exercise, with respect to your personal skills. Other Big Tech companies like <strong>Netflix</strong> and <strong>Amazon</strong> gave up on the coding problem interviews, they recognized that it is NOT the most efficient way of spotting good candidates. During <strong>Amazon</strong> on-site of 6 rounds, I barely wrote more than 5 lines of code, it was very basic. They focused more on <em>Culture</em>, or famous <strong>Leadership Principles</strong> that you really need to prove with your previous experience. It is also much fairer, as your previous achievements and success stories are respected and taken into consideration.</p><p>Well, that is the <strong>main secret,</strong> make it smart and leverage your strength. Know where you can shine and what company’s culture is more suitable for you. Thinking back, I realized that I could pass some of the interviews without 1 year of LeetCode marathon practicing coding problems. If not hard-working and doing the best in my previous company, I would be able to show up about my achievements and get an amazing offer in <strong>Amazon</strong>. Make sure your next company is a great match for you. In the end, don’t just hunt for big names, just try to put yourself in the right place at the right time.</p><h3>Conclusion</h3><p>The trend is that more and more Big Tech companies, like <strong>Amazon</strong> and <strong>Netflix</strong>, are counting less on coding problems interviews. They realized that it is far from the best evaluation of candidates. I think the best way to interview great candidates is to respect previous experience, skills, and expertise. And implementing a real-time coding UI widget also seemed like a better challenge when it came to a frontend role.</p><p><strong>Leave a comment to share what you think about coding problem interviews and don’t forget to follow me on </strong><a href=\"https://medium.com/@easy-web/subscribe\"><strong>Medium</strong></a><strong> and </strong><a href=\"https://twitter.com/EasyWebOrg\"><strong>Twitter</strong></a><strong> if you learned something new today. Thank you for your support</strong> 🙌.</p><p><strong>🔥 <em>IF YOU WOULD LIKE TO GET AMAZON REFERRAL, MESSAGE ME ON </em></strong><a href=\"https://twitter.com/EasyWebOrg\"><strong><em>TWITTER</em></strong></a><strong><em> OR </em></strong><a href=\"https://www.linkedin.com/in/vitalii-shevchuk-86389a112/\"><strong><em>LINKEDIN</em></strong></a><strong><em> </em>🔥</strong></p><ul><li><a href=\"https://medium.com/@easy-web/subscribe\">Get an email whenever Vitalii Shevchuk publishes.</a></li><li><a href=\"https://medium.com/@easy-web/membership\">Join Medium with my referral link - Vitalii Shevchuk</a></li></ul><h3>Learn More</h3><ul><li><a href=\"https://medium.com/@easy-web/frontend-interview-cheatsheet-that-helped-me-to-get-offer-on-amazon-and-linkedin-cba9584e33c7\">🔥 Frontend Interview Cheatsheet that helped me to get Offer on Amazon and LinkedIn</a></li><li><a href=\"https://itnext.io/how-micro-frontend-changes-the-future-of-angular-bb4deb2cfdad\">🔥 How Micro Frontend changes the Future of Angular?</a></li><li><a href=\"https://itnext.io/how-to-scale-angular-without-limits-e6a6ca15111\">🔥 How to Scale Angular Without Limits</a></li></ul><h3>Thank you, Everyone 🙏</h3><p>Thank you Bros and Sis for joining me this week, appreciate your support and will continue to post new articles on interesting Web Technologies topics, don’t forget to <strong>subscribe</strong> <strong>to</strong> <a href=\"https://medium.com/@easy-web/subscribe\"><strong>Medium</strong></a><strong> and </strong><a href=\"https://twitter.com/EasyWebOrg\"><strong>Twitter</strong></a><strong> </strong>to learn something new every week:</p><p><a href=\"https://medium.com/u/19a6ce6ea237\">Kjetil Paulsen</a>, <a href=\"https://medium.com/u/1bc6dd854c00\">Adilpathan</a>, <a href=\"https://medium.com/u/40ba6484ce6\">Bombastik</a>, <a href=\"https://medium.com/u/664350430c08\">Avan Thakkar</a>, <a href=\"https://medium.com/u/7f93c1d83e70\">Arturo Blanco</a>, <a href=\"https://medium.com/u/8b6bebec128a\">Aran Tu</a>, <a href=\"https://medium.com/u/967a72f5d0d2\">Huantao Liu</a>, <a href=\"https://medium.com/u/e0c1fb47ff2e\">Evgeny Tomsen</a>, <a href=\"https://medium.com/u/e0f5dee6e40f\">Husnain Aleem</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9b7ec604a12\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://itnext.io/how-to-become-a-sr-frontend-engineer-in-amazon-without-leetcode-9b7ec604a12\">How to Become a Senior Frontend Engineer in Amazon without LeetCode 🔥</a> was originally published in <a href=\"https://itnext.io\">ITNEXT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "content:encodedSnippet": "🔥 How to Become a Senior Frontend Engineer in Amazon without LeetCode?\nThis is not clickbait, this is a story of how I went from hating LeetCode to getting multiple offers in Big Tech.\n\nContent\n\nIntro\nBig Tech Companies are for lucky people\nExcuses of Coding Problems Interviews\nI hate LeetCode\nThe Mindset of Success\nConclusion\nLearn More\nThank you, Everyone 🙏\n\nIntro\nA massive amount of people are striving and struggling every day to prepare for an interview in so-called FAANG companies (Facebook, Amazon, Apple, Netflix, Google) 😓. The preparation strategies are similar and include solving a huge number of coding problems in LeetCode or in other similar platforms. This article is about why companies give coding problems in interviews and the mindset that helped me to get multiple offers in Big Tech.\nIf you would like to read about the preparation process, as well as the materials and resources I have used, please check this article first\n🔥 Frontend Interview Cheatsheet that helped me to get Offer on Amazon and LinkedIn\nJust for the acknowledgment, I had the interviews with Google, Facebook, Amazon, LinkedIn, DoorDash and received 2 offers from which I have chosen an Amazon.\nEnjoy the reading 😉.\nBig Tech Companies are for lucky people\nhttps://medium.com/media/3036ebf1372b812578b622f81b6c5de0/href\nJoining a Big Tech company is the greatest success in life, you will get all the perks: experience, status, free food, money, stability 💵. But this type of job is also not for everyone. As a downside, you may be unlucky and stuck with an extra-challenging project and team, where you will ruin your work-life harmony to get the promotion. But, let’s say you are very determined, and decided to give up on your life for at least one year, and worked hard and got your dream offer. Don’t be misled, even if you solved thousands of LeetCode problems, and read a few giant books about system design, it is still not enough.\nTo be accurate, it will never be enough, as there are too many factors that can affect your interview process. Personal factors like being too nervous, not being familiar with a particular type of coding problem, not getting enough sleep, insufficient self-control or focus, feeling tired, other personal problems, bad time management. Then there are the external factors: problems with the internet, cannot understand the interviewer (microphone issue, accent, language barrier), cannot reach out to the call, or just having a bad day. I would give only 20% (in my humble estimation) of success to preparation, and the rest 80% is dependent on luck. You may think why do you even need to go through the preparation if the chances are that low? The reason is that you can barely predict the future and rely only on luck; what you can do is make your 20% preparation completely foolproof.\nExcuses of Coding Problems Interviews\nhttps://medium.com/media/64f06d7a96884069ab9935ac08a9ed62/href\nThe topic of coding problems in interviews is quite controversial. On one hand, there are thousands of CVs and referrals a day to get the opportunity for being noticed, and companies have to filter people somehow. On the other hand, is it not showing your qualification and doesn’t evaluate your experience.\nThe different companies have their own interview process, but you can expect phone and on-site interviews from each of them. The key topics usually involve coding problems and system design, but they also vary depending on the role and experience. Why do Big Tech companies even give coding problems if they want to hire qualified engineers, but not competitive programmers?\nOne of the reasons may be proof of hard work. It is obvious to everyone that you don’t solve such problems in the real world. And for each of the candidates, it means a marathon with the length of a year or even more. It requires gaining new skills, organization of your study routine, planning ahead, and a lot of practicing with try and fail. If you can do such hard, unfamiliar work, out of hours, consistently and improve each day, it proves your ability to study and work hard. These skills are crucially important in any IT company, but especially in FAANG as well.\nSolving coding problems make us equal. It doesn’t require your background, your previous experience and evaluates all the candidates from the same perspective. It may sound optimistic enough, that everyone is at a similar level, and you can get the offer even if you came from different background. All you need to do is to study hard and prepare well, not a big deal, yeah 😅. At the same time, many candidates’ experience is not taken into consideration, so that they cannot use their expertise even if they applied for the relevant role, because of the lack of coding problem-solving skills. And it’s not equal enough, as some people can have more time to prepare and freshen up on Computer Science knowledge like undergraduates, while others have time and energy-consuming work, as well as family and kids that require additional attention. But there are people who don’t have strong computer science, engineering or math background and yet successfully work as software engineers. Also, such an approach will standardize the candidates, but what to do to candidates that are not as strong in this particular skill, but quite outstanding in others, more related to the real world? It could have a strong effect on the diversity of the teams.\nAnalytic skills evaluation. Well, it may be another argument in favor of coding problems. Such a task can evaluate analytic skills, time management, speed, creativity, problem-solving skills. It might be true, but the fact is, that such skills are mostly applicable to specific types of problems. In fact, nowadays the highest percentage of software engineers’ work is mostly soft skills, and when it comes to problem-solving, it falls into search in Google or Stack Overflow 🤷‍♀️.\nAnyway, big tech has an absolute right to set the requirements as high as they want. This is the IT market, and you are paying this price to get all these benefits and big salaries. You may treat it as an investment, a long-term investment, you are preparing for a long time to get a higher reward. That can give you the motivation and energy to move forward and don’t give up in the long run.\nI hate LeetCode\nhttps://medium.com/media/8e52d0c1a4d8aba53b9e7dc65b4205d5/href\nI have to admit — practicing coding problems really can give you some personal benefits, not taking into consideration all the interview-related stuff.\nIt trains you to build discipline. You have to organize your time and preparation routine to make sure you progress and don’t ruin your personal life too much.\nThe requirements of solving the coding problem are usually quite strict, and just coming up with the solution is far from enough. You have to code fast, the code has to be modular, variables have to follow good naming conventions, the code has to be bug-free, etc. All of this forces you to keep in mind different aspects and think twice, and even more, before saying anything or starting to write the code. The key is to practice to the level when you are fluent enough to do everything automatically, it has to become a part of you. At the end of the preparation cycle, you will become a time management machine. Overall it is a useful skill in your everyday life, and improving it, will make your life more efficient.\nAlright, but what is the dark side of practicing coding problems? First, you are most likely not good at it. Only if you are competitive programmer or have just graduated from computer science and have fresh memory and more time to practice will you be naturally good at it. And if you don’t even have an engineering or computer science degree, your last math course was in high school and you turned 30, you will never be good enough. Why? Simply because you need a ton of practice and study to reach the required bar, and it’s not even one year. Remember that you have to compete with thousands of candidates that you will be compared with. So, just approaching the coding interview bar is equal to getting a new education.\nAnother stone in the coding problems garden is too strict evaluation. Most of the companies have metrics to evaluate a candidate from different angles. And all these metrics have so called red flags, meaning that if candidate hits some of them, it is definitely no pass. Just want to remind you that we are all humans, and humans make mistakes. Such strict rules only give pass to people who are very fluent in coding problems, or are lucky to encounter similar or same problem, or robots 🤖. And it’s only the tip of the iceberg, here is the whole list: you have 45 minutes to solve 2 problems, you need to listen to each problem in 5 minutes, come up with an optimal solution in 5–10 min, so you have left 15-25 min to write optimal, bug-free, modular, good variable naming code and provide a few test cases to debug 2 problems. Really, in order to make it, there are multiple factors that have to be combined, you must be extremely fluent with the set of coding problems, you have to be lucky to get the same or similar problem that you are familiar with, you have to keep maximum of your self-control and minimize the nerves. Good luck and have fun. 😉\nThere are too many coding problems. Along with the classic ones, new ones are being introduced every day. Big Tech companies keep adding new problems, as candidates are more prepared with respect to the classic stack. Since 4 months of joining Amazon, the number of coding problems on LeetCode increased by 300, and it is only what people shared. This number is overwhelming, and the later you join, the more you have to prepare. In addition to that, you have to redo the problems that you are not fluent with which makes the process even more time-consuming.\nToo many interview rounds. When you pass the phone interview, the next step will be on-site. And it usually has 5–7 rounds in a row. Depending on the level, you may have 3 coding rounds if it’s junior, or 2–3 plus system design if you are senior. Yep, it is a lot. Some of the companies have only a 5 min break in between, and others in different time zones which will shift your interview to the early morning. Despite the fact that the average human can keep attention for only 20 mins, the number of rounds will make you exhausted 😰. You have to be energetic, focused and successful in each of the rounds. It happened to me, that one on-site was 7 rounds, and the last round had a coding problem. My head was completely blank and all my mental powers were drained, so I obviously failed it very badly. The math is simple, the more interviews the more chance to fail.\nThe Mindset of Success\nhttps://medium.com/media/12e635f5fcb176ec2bc72164d90e918a/href\nThen, after all this struggle, do you still want to try to get your dream job? Get ready for it, and start building your mindset that helps you to develop problem-solving skills. Keep in mind, that you will never be ready, so just set a plan, follow it continuously, and then when you complete it, just give it a shot. My personal routine was to get up at 7:30, practice LeetCode for an hour, then start my regular work. Then repeat it in the evening at 21:00 for 2 hours. Saturday is the day off, and Sunday practice the whole day long. I have completed the plan after 1 year, starting from zero.\nThere are multiple points that I feel are important during preparation to succeed with a coding interview:\nThe first is not enough sleep. It will not make your memory work more efficiently. Make sure you have at least 8 hours of sleep every day. Let your brain build new connections.\nDon’t give up on physical activities. You can include jogging, jumping rope, basketball. Prioritize sport that is more cardio-focused. It will make you breathe more, and as a result, get more oxygen which is crucially important for your brain 🧠.\nTake notes all the time. You have to get some output from each of the problems. This is how you grow and become better. Later you will review and repeat these notes multiple times. These notes are your blood and sweat. They will also make you remember things better and longer.\nDon’t take a pause during your preparation routine. The goal is to be in peak condition. The last month has to be dedicated to the repetition of your notes. Don’t plan any long-term vacations in the upcoming year. You will need to take it when you will start to schedule interviews.\nDon’t schedule too many interviews in a short period of time. My mistake was that I took 2 weeks of vacation with my employer at that time. I targeted top-tier companies by getting the referrals or writing to recruiters directly. You have to do it in advance so that at the time when you are ready, you schedule them in your preferable order. In the end, I had Google, Facebook, Amazon, LinkedIn, DoorDash interviews for each day of the week. It was fine in the beginning, but after phone interview rounds were passed, I had to schedule on-sites on each day of the week after. Thinking back, it was too dense. Each on-site is 5–7 rounds, you are going to be burnt out fast 🔥. So take more time and make sure you have at least one day gap between the on-sites.\nFocus more on companies that have fewer coding problems interviews. And this one was a key point of my success 🤩. Yes, it may be surprising for you, that not all Big Tech companies are so focused coding problem interviews. For DoorDash, it was to implement a UI widget in real-time with API integration and state management. They let you choose your frontend framework which you have more expertise with. In my opinion, it was the most relevant interview, and exactly what you can expect from a frontend role. It is fairer as it is a real-world exercise, with respect to your personal skills. Other Big Tech companies like Netflix and Amazon gave up on the coding problem interviews, they recognized that it is NOT the most efficient way of spotting good candidates. During Amazon on-site of 6 rounds, I barely wrote more than 5 lines of code, it was very basic. They focused more on Culture, or famous Leadership Principles that you really need to prove with your previous experience. It is also much fairer, as your previous achievements and success stories are respected and taken into consideration.\nWell, that is the main secret, make it smart and leverage your strength. Know where you can shine and what company’s culture is more suitable for you. Thinking back, I realized that I could pass some of the interviews without 1 year of LeetCode marathon practicing coding problems. If not hard-working and doing the best in my previous company, I would be able to show up about my achievements and get an amazing offer in Amazon. Make sure your next company is a great match for you. In the end, don’t just hunt for big names, just try to put yourself in the right place at the right time.\nConclusion\nThe trend is that more and more Big Tech companies, like Amazon and Netflix, are counting less on coding problems interviews. They realized that it is far from the best evaluation of candidates. I think the best way to interview great candidates is to respect previous experience, skills, and expertise. And implementing a real-time coding UI widget also seemed like a better challenge when it came to a frontend role.\nLeave a comment to share what you think about coding problem interviews and don’t forget to follow me on Medium and Twitter if you learned something new today. Thank you for your support 🙌.\n🔥 IF YOU WOULD LIKE TO GET AMAZON REFERRAL, MESSAGE ME ON TWITTER OR LINKEDIN 🔥\n\nGet an email whenever Vitalii Shevchuk publishes.\nJoin Medium with my referral link - Vitalii Shevchuk\n\nLearn More\n\n🔥 Frontend Interview Cheatsheet that helped me to get Offer on Amazon and LinkedIn\n🔥 How Micro Frontend changes the Future of Angular?\n🔥 How to Scale Angular Without Limits\n\nThank you, Everyone 🙏\nThank you Bros and Sis for joining me this week, appreciate your support and will continue to post new articles on interesting Web Technologies topics, don’t forget to subscribe to Medium and Twitter to learn something new every week:\nKjetil Paulsen, Adilpathan, Bombastik, Avan Thakkar, Arturo Blanco, Aran Tu, Huantao Liu, Evgeny Tomsen, Husnain Aleem.\n\nHow to Become a Senior Frontend Engineer in Amazon without LeetCode 🔥 was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.",
    "dc:creator": "Vitalii Shevchuk",
    "guid": "https://medium.com/p/9b7ec604a12",
    "categories": [
      "career-advice",
      "interview",
      "amazon",
      "javascript",
      "programming"
    ],
    "isoDate": "2021-11-14T23:43:30.000Z"
  }
]
